{"version":3,"file":"index.es.js","sources":["../src/constants/values.ts","../src/constants/rpc.ts","../src/EthereumProvider.ts","../src/index.ts"],"sourcesContent":["export const PROTOCOL = \"wc\";\r\nexport const WC_VERSION = 2;\r\nexport const CONTEXT = \"ethereum_provider\";\r\nexport const STORAGE_KEY = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\r\nexport const RPC_URL = \"https://rpc.walletconnect.com/v1/\";\r\n","export const REQUIRED_METHODS = [\"eth_sendTransaction\", \"personal_sign\"];\r\nexport const OPTIONAL_METHODS = [\r\n  \"eth_accounts\",\r\n  \"eth_requestAccounts\",\r\n  \"eth_sendRawTransaction\",\r\n  \"eth_sign\",\r\n  \"eth_signTransaction\",\r\n  \"eth_signTypedData\",\r\n  \"eth_signTypedData_v3\",\r\n  \"eth_signTypedData_v4\",\r\n  \"eth_sendTransaction\",\r\n  \"personal_sign\",\r\n  \"wallet_switchEthereumChain\",\r\n  \"wallet_addEthereumChain\",\r\n  \"wallet_getPermissions\",\r\n  \"wallet_requestPermissions\",\r\n  \"wallet_registerOnboarding\",\r\n  \"wallet_watchAsset\",\r\n  \"wallet_scanQRCode\",\r\n  \"wallet_sendCalls\",\r\n  \"wallet_getCapabilities\",\r\n  \"wallet_getCallsStatus\",\r\n  \"wallet_showCallsStatus\",\r\n];\r\nexport const REQUIRED_EVENTS = [\"chainChanged\", \"accountsChanged\"];\r\nexport const OPTIONAL_EVENTS = [\r\n  \"chainChanged\",\r\n  \"accountsChanged\",\r\n  \"message\",\r\n  \"disconnect\",\r\n  \"connect\",\r\n];\r\n","import { EventEmitter } from \"events\";\r\nimport { getAccountsFromNamespaces, getSdkError, isValidArray } from \"@walletconnect/utils\";\r\nimport { KeyValueStorageOptions } from \"@walletconnect/keyvaluestorage\";\r\nimport {\r\n  IEthereumProvider as IProvider,\r\n  IEthereumProviderEvents,\r\n  ProviderAccounts,\r\n  RequestArguments,\r\n  QrModalOptions,\r\n} from \"./types\";\r\nimport { Metadata, Namespace, UniversalProvider } from \"@walletconnect/universal-provider\";\r\nimport { AuthTypes, SessionTypes, SignClientTypes } from \"@walletconnect/types\";\r\nimport { JsonRpcResult } from \"@walletconnect/jsonrpc-types\";\r\nimport {\r\n  STORAGE_KEY,\r\n  REQUIRED_METHODS,\r\n  REQUIRED_EVENTS,\r\n  RPC_URL,\r\n  OPTIONAL_METHODS,\r\n  OPTIONAL_EVENTS,\r\n} from \"./constants\";\r\n\r\nexport type RpcMethod =\r\n  | \"personal_sign\"\r\n  | \"eth_sendTransaction\"\r\n  | \"eth_accounts\"\r\n  | \"eth_requestAccounts\"\r\n  | \"eth_call\"\r\n  | \"eth_getBalance\"\r\n  | \"eth_sendRawTransaction\"\r\n  | \"eth_sign\"\r\n  | \"eth_signTransaction\"\r\n  | \"eth_signTypedData\"\r\n  | \"eth_signTypedData_v3\"\r\n  | \"eth_signTypedData_v4\"\r\n  | \"wallet_switchEthereumChain\"\r\n  | \"wallet_addEthereumChain\"\r\n  | \"wallet_getPermissions\"\r\n  | \"wallet_requestPermissions\"\r\n  | \"wallet_registerOnboarding\"\r\n  | \"wallet_watchAsset\"\r\n  | \"wallet_scanQRCode\"\r\n  | \"wallet_sendCalls\"\r\n  | \"wallet_getCapabilities\"\r\n  | \"wallet_getCallsStatus\"\r\n  | \"wallet_showCallsStatus\";\r\n\r\nexport type RpcEvent = \"accountsChanged\" | \"chainChanged\" | \"message\" | \"disconnect\" | \"connect\";\r\n\r\nexport interface EthereumRpcMap {\r\n  [chainId: string]: string;\r\n}\r\n\r\nexport interface SessionEvent {\r\n  event: { name: string; data: any };\r\n  chainId: string;\r\n}\r\n\r\nexport interface EthereumRpcConfig {\r\n  chains: string[];\r\n  optionalChains: string[];\r\n  methods: string[];\r\n  optionalMethods?: string[];\r\n  /**\r\n   * @description Events that the wallet MUST support or the connection will be rejected\r\n   */\r\n  events: string[];\r\n  optionalEvents?: string[];\r\n  rpcMap: EthereumRpcMap;\r\n  projectId: string;\r\n  metadata?: Metadata;\r\n  showQrModal: boolean;\r\n  qrModalOptions?: QrModalOptions;\r\n}\r\nexport interface ConnectOps {\r\n  chains?: number[];\r\n  optionalChains?: number[];\r\n  rpcMap?: EthereumRpcMap;\r\n  pairingTopic?: string;\r\n}\r\n\r\nexport type AuthenticateParams = {\r\n  chains?: number[];\r\n} & Omit<AuthTypes.SessionAuthenticateParams, \"chains\">;\r\n\r\nexport interface IEthereumProvider extends IProvider {\r\n  connect(opts?: ConnectOps | undefined): Promise<void>;\r\n}\r\n\r\nexport function getRpcUrl(chainId: string, rpc: EthereumRpcConfig): string | undefined {\r\n  let rpcUrl: string | undefined;\r\n  if (rpc.rpcMap) {\r\n    rpcUrl = rpc.rpcMap[getEthereumChainId([chainId])];\r\n  }\r\n  return rpcUrl;\r\n}\r\n\r\nexport function getEthereumChainId(chains: string[]): number {\r\n  return Number(chains[0].split(\":\")[1]);\r\n}\r\n\r\nexport function toHexChainId(chainId: number): string {\r\n  return `0x${chainId.toString(16)}`;\r\n}\r\n\r\nexport type NamespacesParams = {\r\n  chains: EthereumRpcConfig[\"chains\"];\r\n  optionalChains: EthereumRpcConfig[\"optionalChains\"];\r\n  methods?: EthereumRpcConfig[\"methods\"];\r\n  optionalMethods?: EthereumRpcConfig[\"methods\"];\r\n  events?: EthereumRpcConfig[\"events\"];\r\n  rpcMap: EthereumRpcConfig[\"rpcMap\"];\r\n  optionalEvents?: EthereumRpcConfig[\"events\"];\r\n};\r\n\r\nexport function buildNamespaces(params: NamespacesParams): {\r\n  required?: Namespace;\r\n  optional?: Namespace;\r\n} {\r\n  const { chains, optionalChains, methods, optionalMethods, events, optionalEvents, rpcMap } =\r\n    params;\r\n  if (!isValidArray(chains)) {\r\n    throw new Error(\"Invalid chains\");\r\n  }\r\n\r\n  const required: Namespace = {\r\n    chains,\r\n    methods: methods || REQUIRED_METHODS,\r\n    events: events || REQUIRED_EVENTS,\r\n    rpcMap: {\r\n      ...(chains.length\r\n        ? { [getEthereumChainId(chains)]: rpcMap[getEthereumChainId(chains)] }\r\n        : {}),\r\n    },\r\n  };\r\n\r\n  // make a list of events and methods that require additional permissions\r\n  // so we know if we should to include the required chains in the optional namespace\r\n  const eventsRequiringPermissions = events?.filter((event) => !REQUIRED_EVENTS.includes(event));\r\n  const methodsRequiringPermissions = methods?.filter((event) => !REQUIRED_METHODS.includes(event));\r\n\r\n  if (\r\n    !optionalChains &&\r\n    !optionalEvents &&\r\n    !optionalMethods &&\r\n    !eventsRequiringPermissions?.length &&\r\n    !methodsRequiringPermissions?.length\r\n  ) {\r\n    return { required: chains.length ? required : undefined };\r\n  }\r\n\r\n  /*\r\n   * decides whether or not to include the required chains in the optional namespace\r\n   * use case: if there is a single chain as required but additional methods/events as optional\r\n   */\r\n  const shouldIncludeRequiredChains =\r\n    (eventsRequiringPermissions?.length && methodsRequiringPermissions?.length) || !optionalChains;\r\n\r\n  const optional: Namespace = {\r\n    chains: [\r\n      ...new Set(\r\n        shouldIncludeRequiredChains ? required.chains.concat(optionalChains || []) : optionalChains,\r\n      ),\r\n    ],\r\n    methods: [\r\n      ...new Set(\r\n        required.methods.concat(optionalMethods?.length ? optionalMethods : OPTIONAL_METHODS),\r\n      ),\r\n    ],\r\n    events: [\r\n      ...new Set(required.events.concat(optionalEvents?.length ? optionalEvents : OPTIONAL_EVENTS)),\r\n    ],\r\n    rpcMap,\r\n  };\r\n\r\n  return {\r\n    required: chains.length ? required : undefined,\r\n    optional: optionalChains.length ? optional : undefined,\r\n  };\r\n}\r\n\r\n// helper type to force setting at least one value in an array\r\ntype ArrayOneOrMore<T> = {\r\n  0: T;\r\n} & Array<T>;\r\n\r\n/**\r\n * @param {number[]} chains - The Chains your app intents to use and the peer MUST support. If the peer does not support these chains, the connection will be rejected.\r\n * @param {number[]} optionalChains - The Chains your app MAY attempt to use and the peer MAY support. If the peer does not support these chains, the connection will still be established.\r\n * @description either chains or optionalChains must be provided\r\n */\r\nexport type ChainsProps =\r\n  | {\r\n      chains: ArrayOneOrMore<number>;\r\n      optionalChains?: number[];\r\n    }\r\n  | {\r\n      chains?: number[];\r\n      optionalChains: ArrayOneOrMore<number>;\r\n    };\r\n\r\nexport type EthereumProviderOptions = {\r\n  projectId: string;\r\n  /**\r\n   * @note Methods that your app intents to use and the peer MUST support. If the peer does not support these methods, the connection will be rejected.\r\n   * @default [\"eth_sendTransaction\", \"personal_sign\"]\r\n   */\r\n  methods?: string[];\r\n  /**\r\n   * @note Methods that your app MAY attempt to use and the peer MAY support. If the peer does not support these methods, the connection will still be established.\r\n   */\r\n  optionalMethods?: string[];\r\n  events?: string[];\r\n  optionalEvents?: string[];\r\n  rpcMap?: EthereumRpcMap;\r\n  metadata?: Metadata;\r\n  showQrModal: boolean;\r\n  qrModalOptions?: QrModalOptions;\r\n  disableProviderPing?: boolean;\r\n  relayUrl?: string;\r\n  storageOptions?: KeyValueStorageOptions;\r\n} & ChainsProps;\r\n\r\nexport class EthereumProvider implements IEthereumProvider {\r\n  public events = new EventEmitter();\r\n  public namespace = \"eip155\";\r\n  public accounts: string[] = [];\r\n  public signer: InstanceType<typeof UniversalProvider>;\r\n  public chainId = 1;\r\n  public modal?: any;\r\n\r\n  protected rpc: EthereumRpcConfig;\r\n  protected readonly STORAGE_KEY = STORAGE_KEY;\r\n\r\n  constructor() {\r\n    // assigned during initialize\r\n    this.signer = {} as InstanceType<typeof UniversalProvider>;\r\n    this.rpc = {} as EthereumRpcConfig;\r\n  }\r\n\r\n  static async init(opts: EthereumProviderOptions): Promise<EthereumProvider> {\r\n    const provider = new EthereumProvider();\r\n    await provider.initialize(opts);\r\n    return provider;\r\n  }\r\n\r\n  public async request<T = unknown>(args: RequestArguments, expiry?: number): Promise<T> {\r\n    return await this.signer.request(args, this.formatChainId(this.chainId), expiry);\r\n  }\r\n\r\n  public sendAsync(\r\n    args: RequestArguments,\r\n    callback: (error: Error | null, response: JsonRpcResult) => void,\r\n    expiry?: number,\r\n  ): void {\r\n    this.signer.sendAsync(args, callback, this.formatChainId(this.chainId), expiry);\r\n  }\r\n\r\n  get connected(): boolean {\r\n    if (!this.signer.client) return false;\r\n    return this.signer.client.core.relayer.connected;\r\n  }\r\n\r\n  get connecting(): boolean {\r\n    if (!this.signer.client) return false;\r\n    return this.signer.client.core.relayer.connecting;\r\n  }\r\n\r\n  public async enable(): Promise<ProviderAccounts> {\r\n    if (!this.session) await this.connect();\r\n    const accounts = await this.request({ method: \"eth_requestAccounts\" });\r\n    return accounts as ProviderAccounts;\r\n  }\r\n\r\n  public async connect(opts?: ConnectOps): Promise<void> {\r\n    if (!this.signer.client) {\r\n      throw new Error(\"Provider not initialized. Call init() first\");\r\n    }\r\n\r\n    this.loadConnectOpts(opts);\r\n    const { required, optional } = buildNamespaces(this.rpc);\r\n    try {\r\n      const session = await new Promise<SessionTypes.Struct | undefined>(\r\n        async (resolve, reject) => {\r\n          if (this.rpc.showQrModal) {\r\n            this.modal?.subscribeModal((state: { open: boolean }) => {\r\n              // the modal was closed so reject the promise\r\n              if (!state.open && !this.signer.session) {\r\n                this.signer.abortPairingAttempt();\r\n                reject(new Error(\"Connection request reset. Please try again.\"));\r\n              }\r\n            });\r\n          }\r\n          await this.signer\r\n            .connect({\r\n              namespaces: {\r\n                ...(required && {\r\n                  [this.namespace]: required,\r\n                }),\r\n              },\r\n              ...(optional && {\r\n                optionalNamespaces: {\r\n                  [this.namespace]: optional,\r\n                },\r\n              }),\r\n              pairingTopic: opts?.pairingTopic,\r\n            })\r\n            .then((session?: SessionTypes.Struct) => {\r\n              resolve(session);\r\n            })\r\n            .catch((error: Error) => {\r\n              reject(new Error(error.message));\r\n            });\r\n        },\r\n      );\r\n      if (!session) return;\r\n\r\n      const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\r\n      // if no required chains are set, use the approved accounts to fetch chainIds\r\n      this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\r\n      this.setAccounts(accounts);\r\n      this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\r\n    } catch (error) {\r\n      this.signer.logger.error(error);\r\n      throw error;\r\n    } finally {\r\n      if (this.modal) this.modal.closeModal();\r\n    }\r\n  }\r\n\r\n  public async authenticate(\r\n    params: AuthenticateParams,\r\n  ): Promise<AuthTypes.AuthenticateResponseResult | undefined> {\r\n    if (!this.signer.client) {\r\n      throw new Error(\"Provider not initialized. Call init() first\");\r\n    }\r\n\r\n    this.loadConnectOpts({\r\n      chains: params?.chains,\r\n    });\r\n\r\n    try {\r\n      const result = await new Promise<AuthTypes.AuthenticateResponseResult>(\r\n        async (resolve, reject) => {\r\n          if (this.rpc.showQrModal) {\r\n            this.modal?.subscribeModal((state: { open: boolean }) => {\r\n              // the modal was closed so reject the promise\r\n              if (!state.open && !this.signer.session) {\r\n                this.signer.abortPairingAttempt();\r\n                reject(new Error(\"Connection request reset. Please try again.\"));\r\n              }\r\n            });\r\n          }\r\n          await this.signer\r\n            .authenticate({\r\n              ...params,\r\n              chains: this.rpc.chains,\r\n            })\r\n            .then((result: AuthTypes.AuthenticateResponseResult) => {\r\n              resolve(result);\r\n            })\r\n            .catch((error: Error) => {\r\n              reject(new Error(error.message));\r\n            });\r\n        },\r\n      );\r\n\r\n      const session = result.session;\r\n      if (session) {\r\n        const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\r\n        // if no required chains are set, use the approved accounts to fetch chainIds as both contain <namespace>:<chainId>\r\n        this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\r\n        this.setAccounts(accounts);\r\n        this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\r\n      }\r\n      return result;\r\n    } catch (error) {\r\n      this.signer.logger.error(error);\r\n      throw error;\r\n    } finally {\r\n      if (this.modal) this.modal.closeModal();\r\n    }\r\n  }\r\n\r\n  public async disconnect(): Promise<void> {\r\n    if (this.session) {\r\n      await this.signer.disconnect();\r\n    }\r\n    this.reset();\r\n  }\r\n\r\n  public on: IEthereumProviderEvents[\"on\"] = (event, listener) => {\r\n    this.events.on(event, listener);\r\n    return this;\r\n  };\r\n\r\n  public once: IEthereumProviderEvents[\"once\"] = (event, listener) => {\r\n    this.events.once(event, listener);\r\n    return this;\r\n  };\r\n\r\n  public removeListener: IEthereumProviderEvents[\"removeListener\"] = (event, listener) => {\r\n    this.events.removeListener(event, listener);\r\n    return this;\r\n  };\r\n\r\n  public off: IEthereumProviderEvents[\"off\"] = (event, listener) => {\r\n    this.events.off(event, listener);\r\n    return this;\r\n  };\r\n\r\n  get isWalletConnect() {\r\n    return true;\r\n  }\r\n\r\n  get session() {\r\n    return this.signer.session;\r\n  }\r\n\r\n  // ---------- Protected --------------------------------------------- //\r\n\r\n  protected registerEventListeners() {\r\n    this.signer.on(\"session_event\", (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\r\n      const { params } = payload;\r\n      const { event } = params;\r\n      if (event.name === \"accountsChanged\") {\r\n        this.accounts = this.parseAccounts(event.data);\r\n        this.events.emit(\"accountsChanged\", this.accounts);\r\n      } else if (event.name === \"chainChanged\") {\r\n        this.setChainId(this.formatChainId(event.data));\r\n      } else {\r\n        this.events.emit(event.name as any, event.data);\r\n      }\r\n      this.events.emit(\"session_event\", payload);\r\n    });\r\n\r\n    this.signer.on(\"chainChanged\", (chainId: string) => {\r\n      const chain = parseInt(chainId);\r\n      this.chainId = chain;\r\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\r\n      this.persist();\r\n    });\r\n\r\n    this.signer.on(\r\n      \"session_update\",\r\n      (payload: SignClientTypes.EventArguments[\"session_update\"]) => {\r\n        this.events.emit(\"session_update\", payload);\r\n      },\r\n    );\r\n\r\n    this.signer.on(\r\n      \"session_delete\",\r\n      (payload: SignClientTypes.EventArguments[\"session_delete\"]) => {\r\n        this.reset();\r\n        this.events.emit(\"session_delete\", payload);\r\n        this.events.emit(\"disconnect\", {\r\n          ...getSdkError(\"USER_DISCONNECTED\"),\r\n          data: payload.topic,\r\n          name: \"USER_DISCONNECTED\",\r\n        });\r\n      },\r\n    );\r\n\r\n    this.signer.on(\"display_uri\", (uri: string) => {\r\n      if (this.rpc.showQrModal) {\r\n        // to refresh the QR we have to close the modal and open it again\r\n        // until proper API is provided by walletconnect modal\r\n        this.modal?.closeModal();\r\n        this.modal?.openModal({ uri });\r\n      }\r\n      this.events.emit(\"display_uri\", uri);\r\n    });\r\n  }\r\n\r\n  protected switchEthereumChain(chainId: number): void {\r\n    this.request({\r\n      method: \"wallet_switchEthereumChain\",\r\n      params: [{ chainId: chainId.toString(16) }],\r\n    });\r\n  }\r\n\r\n  protected isCompatibleChainId(chainId: string): boolean {\r\n    return typeof chainId === \"string\" ? chainId.startsWith(`${this.namespace}:`) : false;\r\n  }\r\n\r\n  protected formatChainId(chainId: number): string {\r\n    return `${this.namespace}:${chainId}`;\r\n  }\r\n\r\n  protected parseChainId(chainId: string): number {\r\n    return Number(chainId.split(\":\")[1]);\r\n  }\r\n\r\n  protected setChainIds(chains: string[]) {\r\n    const compatible = chains.filter((x) => this.isCompatibleChainId(x));\r\n    const chainIds = compatible.map((c) => this.parseChainId(c));\r\n    if (chainIds.length) {\r\n      this.chainId = chainIds[0];\r\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\r\n      this.persist();\r\n    }\r\n  }\r\n\r\n  protected setChainId(chain: string) {\r\n    if (this.isCompatibleChainId(chain)) {\r\n      const chainId = this.parseChainId(chain);\r\n      this.chainId = chainId;\r\n      this.switchEthereumChain(chainId);\r\n    }\r\n  }\r\n\r\n  protected parseAccountId(account: string): { chainId: string; address: string } {\r\n    const [namespace, reference, address] = account.split(\":\");\r\n    const chainId = `${namespace}:${reference}`;\r\n    return { chainId, address };\r\n  }\r\n\r\n  protected setAccounts(accounts: string[]) {\r\n    this.accounts = accounts\r\n      .filter((x) => this.parseChainId(this.parseAccountId(x).chainId) === this.chainId)\r\n      .map((x) => this.parseAccountId(x).address);\r\n    this.events.emit(\"accountsChanged\", this.accounts);\r\n  }\r\n\r\n  protected getRpcConfig(opts: EthereumProviderOptions): EthereumRpcConfig {\r\n    const requiredChains = opts?.chains ?? [];\r\n    const optionalChains = opts?.optionalChains ?? [];\r\n    const allChains = requiredChains.concat(optionalChains);\r\n    if (!allChains.length)\r\n      throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\r\n    const requiredMethods = requiredChains.length ? opts?.methods || REQUIRED_METHODS : [];\r\n    const requiredEvents = requiredChains.length ? opts?.events || REQUIRED_EVENTS : [];\r\n    const optionalMethods = opts?.optionalMethods || [];\r\n    const optionalEvents = opts?.optionalEvents || [];\r\n    const rpcMap = opts?.rpcMap || this.buildRpcMap(allChains, opts.projectId);\r\n    const qrModalOptions = opts?.qrModalOptions || undefined;\r\n    return {\r\n      chains: requiredChains?.map((chain) => this.formatChainId(chain)),\r\n      optionalChains: optionalChains.map((chain) => this.formatChainId(chain)),\r\n      methods: requiredMethods,\r\n      events: requiredEvents,\r\n      optionalMethods,\r\n      optionalEvents,\r\n      rpcMap,\r\n      showQrModal: Boolean(opts?.showQrModal),\r\n      qrModalOptions,\r\n      projectId: opts.projectId,\r\n      metadata: opts.metadata,\r\n    };\r\n  }\r\n\r\n  protected buildRpcMap(chains: number[], projectId: string): EthereumRpcMap {\r\n    const map: EthereumRpcMap = {};\r\n    chains.forEach((chain) => {\r\n      map[chain] = this.getRpcUrl(chain, projectId);\r\n    });\r\n    return map;\r\n  }\r\n\r\n  protected async initialize(opts: EthereumProviderOptions) {\r\n    this.rpc = this.getRpcConfig(opts);\r\n\r\n    this.chainId = this.rpc.chains.length\r\n      ? getEthereumChainId(this.rpc.chains)\r\n      : getEthereumChainId(this.rpc.optionalChains);\r\n    this.signer = await UniversalProvider.init({\r\n      projectId: this.rpc.projectId,\r\n      metadata: this.rpc.metadata,\r\n      disableProviderPing: opts.disableProviderPing,\r\n      relayUrl: opts.relayUrl,\r\n      storageOptions: opts.storageOptions,\r\n    });\r\n    this.registerEventListeners();\r\n    await this.loadPersistedSession();\r\n    if (this.rpc.showQrModal) {\r\n      let WalletConnectModalClass;\r\n      try {\r\n        const { WalletConnectModal } = await import(\"@walletconnect/modal\");\r\n        WalletConnectModalClass = WalletConnectModal;\r\n      } catch {\r\n        throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\r\n      }\r\n      if (WalletConnectModalClass) {\r\n        try {\r\n          this.modal = new WalletConnectModalClass({\r\n            projectId: this.rpc.projectId,\r\n            ...this.rpc.qrModalOptions,\r\n          });\r\n        } catch (e) {\r\n          this.signer.logger.error(e);\r\n          throw new Error(\"Could not generate WalletConnectModal Instance\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected loadConnectOpts(opts?: ConnectOps) {\r\n    if (!opts) return;\r\n    const { chains, optionalChains, rpcMap } = opts;\r\n    if (chains && isValidArray(chains)) {\r\n      this.rpc.chains = chains.map((chain) => this.formatChainId(chain));\r\n      chains.forEach((chain) => {\r\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\r\n      });\r\n    }\r\n    if (optionalChains && isValidArray(optionalChains)) {\r\n      this.rpc.optionalChains = [];\r\n      this.rpc.optionalChains = optionalChains?.map((chain) => this.formatChainId(chain));\r\n      optionalChains.forEach((chain) => {\r\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\r\n      });\r\n    }\r\n  }\r\n\r\n  protected getRpcUrl(chainId: number, projectId?: string): string {\r\n    const providedRpc = this.rpc.rpcMap?.[chainId];\r\n    return (\r\n      providedRpc ||\r\n      `${RPC_URL}?chainId=eip155:${chainId}&projectId=${projectId || this.rpc.projectId}`\r\n    );\r\n  }\r\n\r\n  protected async loadPersistedSession() {\r\n    if (!this.session) return;\r\n    try {\r\n      const chainId = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`);\r\n\r\n      // cater to both inline & nested namespace formats\r\n      const namespace = this.session.namespaces[`${this.namespace}:${chainId}`]\r\n        ? this.session.namespaces[`${this.namespace}:${chainId}`]\r\n        : this.session.namespaces[this.namespace];\r\n\r\n      this.setChainIds(chainId ? [this.formatChainId(chainId)] : namespace?.accounts);\r\n      this.setAccounts(namespace?.accounts);\r\n    } catch (error) {\r\n      this.signer.logger.error(\"Failed to load persisted session, clearing state...\");\r\n      this.signer.logger.error(error);\r\n      await this.disconnect().catch((error) => this.signer.logger.warn(error));\r\n    }\r\n  }\r\n\r\n  protected reset() {\r\n    this.chainId = 1;\r\n    this.accounts = [];\r\n  }\r\n\r\n  protected persist() {\r\n    if (!this.session) return;\r\n    this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\r\n  }\r\n\r\n  protected parseAccounts(payload: string | string[]): string[] {\r\n    if (typeof payload === \"string\" || payload instanceof String) {\r\n      return [this.parseAccount(payload)];\r\n    }\r\n    return payload.map((account: string) => this.parseAccount(account));\r\n  }\r\n\r\n  protected parseAccount = (payload: any): string => {\r\n    return this.isCompatibleChainId(payload) ? this.parseAccountId(payload).address : payload;\r\n  };\r\n}\r\n\r\nexport default EthereumProvider;\r\n","import { EthereumProvider as Provider } from \"./EthereumProvider\";\r\nexport const EthereumProvider = Provider;\r\nexport type { EthereumProviderOptions, RpcEvent, RpcMethod } from \"./EthereumProvider\";\r\nexport * from \"./constants/rpc\";\r\nexport default Provider;\r\n"],"names":["chains","chainId","params","optionalChains","methods","optionalMethods","events","optionalEvents","rpcMap","isValidArray","required","REQUIRED_METHODS","REQUIRED_EVENTS","__spreadValues","eventsRequiringPermissions","event","methodsRequiringPermissions","shouldIncludeRequiredChains","optional","OPTIONAL_METHODS","OPTIONAL_EVENTS","EthereumProvider","EventEmitter","STORAGE_KEY","listener","payload","opts","provider","args","expiry","callback","session","resolve","reject","_a","state","__spreadProps","error","accounts","getAccountsFromNamespaces","result","chain","getSdkError","uri","_b","chainIds","x","c","account","namespace","reference","address","requiredChains","allChains","requiredMethods","requiredEvents","qrModalOptions","projectId","map","UniversalProvider","WalletConnectModalClass","WalletConnectModal","e","RPC_URL","Provider"],"mappings":"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"}