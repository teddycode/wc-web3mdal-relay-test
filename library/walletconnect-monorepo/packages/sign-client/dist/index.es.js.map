{"version":3,"file":"index.es.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\r\n\r\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\r\nexport const SIGN_CLIENT_VERSION = 2;\r\nexport const SIGN_CLIENT_CONTEXT = \"client\";\r\n\r\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\r\n\r\nexport const SIGN_CLIENT_DEFAULT = {\r\n  name: SIGN_CLIENT_CONTEXT,\r\n  logger: \"error\",\r\n  controller: false,\r\n  // relayUrl: \"wss://relay.walletconnect.com\",\r\n  relayUrl: 'ws://123.157.213.104:3010',\r\n};\r\n\r\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\r\n  session_proposal: \"session_proposal\",\r\n  session_update: \"session_update\",\r\n  session_extend: \"session_extend\",\r\n  session_ping: \"session_ping\",\r\n  session_delete: \"session_delete\",\r\n  session_expire: \"session_expire\",\r\n  session_request: \"session_request\",\r\n  session_request_sent: \"session_request_sent\",\r\n  session_event: \"session_event\",\r\n  proposal_expire: \"proposal_expire\",\r\n  session_authenticate: \"session_authenticate\",\r\n  session_request_expire: \"session_request_expire\",\r\n};\r\n\r\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\r\n  database: \":memory:\",\r\n};\r\n\r\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\r\n","export const HISTORY_EVENTS = {\r\n  created: \"history_created\",\r\n  updated: \"history_updated\",\r\n  deleted: \"history_deleted\",\r\n  sync: \"history_sync\",\r\n};\r\n\r\nexport const HISTORY_CONTEXT = \"history\";\r\n\r\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\r\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\r\n\r\nexport const PROPOSAL_CONTEXT = \"proposal\";\r\n\r\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\r\n\r\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\r\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\r\n\r\nexport const SESSION_CONTEXT = \"session\";\r\n\r\nexport const SESSION_EXPIRY = SEVEN_DAYS;\r\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\r\nimport { EngineTypes } from \"@walletconnect/types\";\r\n\r\nexport const ENGINE_CONTEXT = \"engine\";\r\n\r\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\r\n  wc_sessionPropose: {\r\n    req: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: true,\r\n      tag: 1100,\r\n    },\r\n    res: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1101,\r\n    },\r\n    reject: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1120,\r\n    },\r\n    autoReject: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1121,\r\n    },\r\n  },\r\n  wc_sessionSettle: {\r\n    req: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1102,\r\n    },\r\n    res: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1103,\r\n    },\r\n  },\r\n  wc_sessionUpdate: {\r\n    req: {\r\n      ttl: ONE_DAY,\r\n      prompt: false,\r\n      tag: 1104,\r\n    },\r\n    res: {\r\n      ttl: ONE_DAY,\r\n      prompt: false,\r\n      tag: 1105,\r\n    },\r\n  },\r\n  wc_sessionExtend: {\r\n    req: {\r\n      ttl: ONE_DAY,\r\n      prompt: false,\r\n      tag: 1106,\r\n    },\r\n    res: {\r\n      ttl: ONE_DAY,\r\n      prompt: false,\r\n      tag: 1107,\r\n    },\r\n  },\r\n  wc_sessionRequest: {\r\n    req: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: true,\r\n      tag: 1108,\r\n    },\r\n    res: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1109,\r\n    },\r\n  },\r\n  wc_sessionEvent: {\r\n    req: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: true,\r\n      tag: 1110,\r\n    },\r\n    res: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1111,\r\n    },\r\n  },\r\n\r\n  wc_sessionDelete: {\r\n    req: {\r\n      ttl: ONE_DAY,\r\n      prompt: false,\r\n      tag: 1112,\r\n    },\r\n    res: {\r\n      ttl: ONE_DAY,\r\n      prompt: false,\r\n      tag: 1113,\r\n    },\r\n  },\r\n  wc_sessionPing: {\r\n    req: {\r\n      ttl: ONE_DAY,\r\n      prompt: false,\r\n      tag: 1114,\r\n    },\r\n    res: {\r\n      ttl: ONE_DAY,\r\n      prompt: false,\r\n      tag: 1115,\r\n    },\r\n  },\r\n  wc_sessionAuthenticate: {\r\n    req: {\r\n      ttl: ONE_HOUR,\r\n      prompt: true,\r\n      tag: 1116,\r\n    },\r\n    res: {\r\n      ttl: ONE_HOUR,\r\n      prompt: false,\r\n      tag: 1117,\r\n    },\r\n    reject: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1118,\r\n    },\r\n    autoReject: {\r\n      ttl: FIVE_MINUTES,\r\n      prompt: false,\r\n      tag: 1119,\r\n    },\r\n  },\r\n};\r\n\r\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\r\n  min: FIVE_MINUTES,\r\n  max: SEVEN_DAYS,\r\n};\r\n\r\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\r\n  idle: \"IDLE\",\r\n  active: \"ACTIVE\",\r\n};\r\n","export const REQUEST_CONTEXT = \"request\";\r\n","export const METHODS_TO_VERIFY = [\r\n  \"wc_sessionPropose\",\r\n  \"wc_sessionRequest\",\r\n  \"wc_authRequest\",\r\n  \"wc_sessionAuthenticate\",\r\n];\r\n","export const AUTH_PROTOCOL = \"wc\";\r\nexport const AUTH_VERSION = 1.5;\r\nexport const AUTH_CONTEXT = \"auth\";\r\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\r\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\r\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\r\n\r\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\r\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\r\n","import {\r\n  EXPIRER_EVENTS,\r\n  PAIRING_EVENTS,\r\n  RELAYER_DEFAULT_PROTOCOL,\r\n  RELAYER_EVENTS,\r\n  VERIFY_SERVER,\r\n} from \"@walletconnect/core\";\r\n\r\nimport {\r\n  formatJsonRpcError,\r\n  formatJsonRpcRequest,\r\n  formatJsonRpcResult,\r\n  payloadId,\r\n  isJsonRpcError,\r\n  isJsonRpcRequest,\r\n  isJsonRpcResponse,\r\n  isJsonRpcResult,\r\n  JsonRpcRequest,\r\n  ErrorResponse,\r\n  getBigIntRpcId,\r\n} from \"@walletconnect/jsonrpc-utils\";\r\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\r\nimport {\r\n  EnginePrivate,\r\n  EngineTypes,\r\n  ExpirerTypes,\r\n  IEngine,\r\n  IEngineEvents,\r\n  JsonRpcTypes,\r\n  PendingRequestTypes,\r\n  Verify,\r\n  CoreTypes,\r\n  ProposalTypes,\r\n  RelayerTypes,\r\n  SessionTypes,\r\n  PairingTypes,\r\n  AuthTypes,\r\n} from \"@walletconnect/types\";\r\nimport {\r\n  calcExpiry,\r\n  createDelayedPromise,\r\n  engineEvent,\r\n  getInternalError,\r\n  getSdkError,\r\n  isConformingNamespaces,\r\n  isExpired,\r\n  isSessionCompatible,\r\n  isUndefined,\r\n  isValidController,\r\n  isValidErrorReason,\r\n  isValidEvent,\r\n  isValidId,\r\n  isValidNamespaces,\r\n  isValidNamespacesChainId,\r\n  isValidNamespacesEvent,\r\n  isValidNamespacesRequest,\r\n  isValidObject,\r\n  isValidParams,\r\n  isValidRelay,\r\n  isValidRelays,\r\n  isValidRequest,\r\n  isValidRequestExpiry,\r\n  hashMessage,\r\n  isBrowser,\r\n  isValidRequiredNamespaces,\r\n  isValidResponse,\r\n  isValidString,\r\n  parseExpirerTarget,\r\n  TYPE_1,\r\n  handleDeeplinkRedirect,\r\n  MemoryStore,\r\n  getDeepLink,\r\n  hashKey,\r\n  getDidAddress,\r\n  formatMessage,\r\n  getMethodsFromRecap,\r\n  buildNamespacesFromAuth,\r\n  createEncodedRecap,\r\n  getChainsFromRecap,\r\n  mergeEncodedRecaps,\r\n  getRecapFromResources,\r\n  validateSignedCacao,\r\n  getNamespacedDidChainId,\r\n  parseChainId,\r\n} from \"@walletconnect/utils\";\r\nimport EventEmmiter from \"events\";\r\nimport {\r\n  ENGINE_CONTEXT,\r\n  ENGINE_RPC_OPTS,\r\n  PROPOSAL_EXPIRY_MESSAGE,\r\n  SESSION_EXPIRY,\r\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\r\n  METHODS_TO_VERIFY,\r\n  WALLETCONNECT_DEEPLINK_CHOICE,\r\n  ENGINE_QUEUE_STATES,\r\n  AUTH_PUBLIC_KEY_NAME,\r\n} from \"../constants\";\r\n\r\nexport class Engine extends IEngine {\r\n  public name = ENGINE_CONTEXT;\r\n\r\n  private events: IEngineEvents = new EventEmmiter();\r\n  private initialized = false;\r\n\r\n  /**\r\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\r\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\r\n   */\r\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\r\n    state: ENGINE_QUEUE_STATES.idle,\r\n    queue: [],\r\n  };\r\n\r\n  /**\r\n   * Queue responsible for processing incoming session_request\r\n   * The queue emits the next request only after the previous one has been responded to\r\n   */\r\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\r\n    state: ENGINE_QUEUE_STATES.idle,\r\n    queue: [],\r\n  };\r\n\r\n  private requestQueueDelay = ONE_SECOND;\r\n\r\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\r\n\r\n  // Ephemeral (in-memory) map to store recently deleted items\r\n  private recentlyDeletedMap = new Map<\r\n    string | number,\r\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\r\n  >();\r\n\r\n  private recentlyDeletedLimit = 200;\r\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\r\n\r\n  constructor(client: IEngine[\"client\"]) {\r\n    super(client);\r\n  }\r\n\r\n  public init: IEngine[\"init\"] = async () => {\r\n    if (!this.initialized) {\r\n      await this.cleanup();\r\n      this.registerRelayerEvents();\r\n      this.registerExpirerEvents();\r\n      this.registerPairingEvents();\r\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\r\n      this.initialized = true;\r\n      setTimeout(() => {\r\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\r\n        this.processSessionRequestQueue();\r\n      }, toMiliseconds(this.requestQueueDelay));\r\n    }\r\n  };\r\n\r\n  // ---------- Public ------------------------------------------------ //\r\n\r\n  public connect: IEngine[\"connect\"] = async (params) => {\r\n    await this.isInitialized();\r\n    const connectParams = {\r\n      ...params,\r\n      requiredNamespaces: params.requiredNamespaces || {},\r\n      optionalNamespaces: params.optionalNamespaces || {},\r\n    };\r\n    await this.isValidConnect(connectParams);\r\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\r\n      connectParams;\r\n    let topic = pairingTopic;\r\n    let uri: string | undefined;\r\n    let active = false;\r\n\r\n    try {\r\n      if (topic) {\r\n        const pairing = this.client.core.pairing.pairings.get(topic);\r\n        active = pairing.active;\r\n      }\r\n    } catch (error) {\r\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\r\n      throw error;\r\n    }\r\n    if (!topic || !active) {\r\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\r\n      topic = newTopic;\r\n      uri = newUri;\r\n    }\r\n    // safety check to ensure pairing topic is available\r\n    if (!topic) {\r\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\r\n      throw new Error(message);\r\n    }\r\n\r\n    const publicKey = await this.client.core.crypto.generateKeyPair();\r\n\r\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\r\n    const expiryTimestamp = calcExpiry(expiry);\r\n    const proposal = {\r\n      requiredNamespaces,\r\n      optionalNamespaces,\r\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\r\n      proposer: {\r\n        publicKey,\r\n        metadata: this.client.metadata,\r\n      },\r\n      expiryTimestamp,\r\n      pairingTopic: topic,\r\n      ...(sessionProperties && { sessionProperties }),\r\n    };\r\n    const {\r\n      reject,\r\n      resolve,\r\n      done: approval,\r\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\r\n    this.events.once<\"session_connect\">(\r\n      engineEvent(\"session_connect\"),\r\n      async ({ error, session }) => {\r\n        if (error) reject(error);\r\n        else if (session) {\r\n          session.self.publicKey = publicKey;\r\n          const completeSession = {\r\n            ...session,\r\n            pairingTopic: proposal.pairingTopic,\r\n            requiredNamespaces: proposal.requiredNamespaces,\r\n            optionalNamespaces: proposal.optionalNamespaces,\r\n          };\r\n          await this.client.session.set(session.topic, completeSession);\r\n          await this.setExpiry(session.topic, session.expiry);\r\n          if (topic) {\r\n            await this.client.core.pairing.updateMetadata({\r\n              topic,\r\n              metadata: session.peer.metadata,\r\n            });\r\n          }\r\n          this.cleanupDuplicatePairings(completeSession);\r\n          resolve(completeSession);\r\n        }\r\n      },\r\n    );\r\n    const id = await this.sendRequest({\r\n      topic,\r\n      method: \"wc_sessionPropose\",\r\n      params: proposal,\r\n      throwOnFailedPublish: true,\r\n    });\r\n    await this.setProposal(id, { id, ...proposal });\r\n    return { uri, approval };\r\n  };\r\n\r\n  public pair: IEngine[\"pair\"] = async (params) => {\r\n    await this.isInitialized();\r\n    try {\r\n      return await this.client.core.pairing.pair(params);\r\n    } catch (error) {\r\n      this.client.logger.error(\"pair() failed\");\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public approve: IEngine[\"approve\"] = async (params) => {\r\n    await this.isInitialized();\r\n    try {\r\n      await this.isValidApprove(params);\r\n    } catch (error) {\r\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\r\n      throw error;\r\n    }\r\n    const { id, relayProtocol, namespaces, sessionProperties, sessionConfig } = params;\r\n    let proposal;\r\n    try {\r\n      proposal = this.client.proposal.get(id);\r\n    } catch (error) {\r\n      this.client.logger.error(`approve() -> proposal.get(${id}) failed`);\r\n      throw error;\r\n    }\r\n\r\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\r\n\r\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\r\n    const peerPublicKey = proposer.publicKey;\r\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\r\n      selfPublicKey,\r\n      peerPublicKey,\r\n    );\r\n    const sessionSettle = {\r\n      relay: { protocol: relayProtocol ?? \"irn\" },\r\n      namespaces,\r\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\r\n      expiry: calcExpiry(SESSION_EXPIRY),\r\n      ...(sessionProperties && { sessionProperties }),\r\n      ...(sessionConfig && { sessionConfig }),\r\n    };\r\n    await this.client.core.relayer.subscribe(sessionTopic);\r\n    const session = {\r\n      ...sessionSettle,\r\n      topic: sessionTopic,\r\n      requiredNamespaces,\r\n      optionalNamespaces,\r\n      pairingTopic,\r\n      acknowledged: false,\r\n      self: sessionSettle.controller,\r\n      peer: {\r\n        publicKey: proposer.publicKey,\r\n        metadata: proposer.metadata,\r\n      },\r\n      controller: selfPublicKey,\r\n    };\r\n    await this.client.session.set(sessionTopic, session);\r\n    try {\r\n      await this.sendResult<\"wc_sessionPropose\">({\r\n        id,\r\n        topic: pairingTopic,\r\n        result: {\r\n          relay: {\r\n            protocol: relayProtocol ?? \"irn\",\r\n          },\r\n          responderPublicKey: selfPublicKey,\r\n        },\r\n        throwOnFailedPublish: true,\r\n      });\r\n      await this.sendRequest({\r\n        topic: sessionTopic,\r\n        method: \"wc_sessionSettle\",\r\n        params: sessionSettle,\r\n        throwOnFailedPublish: true,\r\n      });\r\n    } catch (error) {\r\n      this.client.logger.error(error);\r\n      // if the publish fails, delete the session and throw an error\r\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\r\n      await this.client.core.relayer.unsubscribe(sessionTopic);\r\n      throw error;\r\n    }\r\n\r\n    await this.client.core.pairing.updateMetadata({\r\n      topic: pairingTopic,\r\n      metadata: proposer.metadata,\r\n    });\r\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\r\n    await this.client.core.pairing.activate({ topic: pairingTopic });\r\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\r\n    return {\r\n      topic: sessionTopic,\r\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\r\n    };\r\n  };\r\n\r\n  public reject: IEngine[\"reject\"] = async (params) => {\r\n    await this.isInitialized();\r\n    try {\r\n      await this.isValidReject(params);\r\n    } catch (error) {\r\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\r\n      throw error;\r\n    }\r\n    const { id, reason } = params;\r\n    let pairingTopic;\r\n    try {\r\n      const proposal = this.client.proposal.get(id);\r\n      pairingTopic = proposal.pairingTopic;\r\n    } catch (error) {\r\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\r\n      throw error;\r\n    }\r\n\r\n    if (pairingTopic) {\r\n      await this.sendError({\r\n        id,\r\n        topic: pairingTopic,\r\n        error: reason,\r\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\r\n      });\r\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\r\n    }\r\n  };\r\n\r\n  public update: IEngine[\"update\"] = async (params) => {\r\n    await this.isInitialized();\r\n    try {\r\n      await this.isValidUpdate(params);\r\n    } catch (error) {\r\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\r\n      throw error;\r\n    }\r\n    const { topic, namespaces } = params;\r\n\r\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\r\n    const clientRpcId = payloadId();\r\n    const relayRpcId = getBigIntRpcId().toString() as any;\r\n\r\n    const oldNamespaces = this.client.session.get(topic).namespaces;\r\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\r\n      if (error) reject(error);\r\n      else {\r\n        resolve();\r\n      }\r\n    });\r\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\r\n    // This allows the client to use the updated session like emitting events\r\n    // without waiting for the peer to acknowledge\r\n    await this.client.session.update(topic, { namespaces });\r\n    await this.sendRequest({\r\n      topic,\r\n      method: \"wc_sessionUpdate\",\r\n      params: { namespaces },\r\n      throwOnFailedPublish: true,\r\n      clientRpcId,\r\n      relayRpcId,\r\n    }).catch((error) => {\r\n      this.client.logger.error(error);\r\n      this.client.session.update(topic, { namespaces: oldNamespaces });\r\n      reject(error);\r\n    });\r\n    return { acknowledged };\r\n  };\r\n\r\n  public extend: IEngine[\"extend\"] = async (params) => {\r\n    await this.isInitialized();\r\n    try {\r\n      await this.isValidExtend(params);\r\n    } catch (error) {\r\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\r\n      throw error;\r\n    }\r\n\r\n    const { topic } = params;\r\n    const clientRpcId = payloadId();\r\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\r\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\r\n      if (error) reject(error);\r\n      else resolve();\r\n    });\r\n\r\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\r\n    this.sendRequest({\r\n      topic,\r\n      method: \"wc_sessionExtend\",\r\n      params: {},\r\n      clientRpcId,\r\n      throwOnFailedPublish: true,\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n\r\n    return { acknowledged };\r\n  };\r\n\r\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\r\n    await this.isInitialized();\r\n    try {\r\n      await this.isValidRequest(params);\r\n    } catch (error) {\r\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\r\n      throw error;\r\n    }\r\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\r\n    const session = this.client.session.get(topic);\r\n    const clientRpcId = payloadId();\r\n    const relayRpcId = getBigIntRpcId().toString() as any;\r\n    const { done, resolve, reject } = createDelayedPromise<T>(\r\n      expiry,\r\n      \"Request expired. Please try again.\",\r\n    );\r\n    this.events.once<\"session_request\">(\r\n      engineEvent(\"session_request\", clientRpcId),\r\n      ({ error, result }) => {\r\n        if (error) reject(error);\r\n        else resolve(result);\r\n      },\r\n    );\r\n    return await Promise.all([\r\n      new Promise<void>(async (resolve) => {\r\n        await this.sendRequest({\r\n          clientRpcId,\r\n          relayRpcId,\r\n          topic,\r\n          method: \"wc_sessionRequest\",\r\n          params: {\r\n            request: {\r\n              ...request,\r\n              expiryTimestamp: calcExpiry(expiry),\r\n            },\r\n            chainId,\r\n          },\r\n          expiry,\r\n          throwOnFailedPublish: true,\r\n        }).catch((error) => reject(error));\r\n        this.client.events.emit(\"session_request_sent\", {\r\n          topic,\r\n          request,\r\n          chainId,\r\n          id: clientRpcId,\r\n        });\r\n        resolve();\r\n      }),\r\n      new Promise<void>(async (resolve) => {\r\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\r\n        if (!session.sessionConfig?.disableDeepLink) {\r\n          const wcDeepLink = await getDeepLink(\r\n            this.client.core.storage,\r\n            WALLETCONNECT_DEEPLINK_CHOICE,\r\n          );\r\n          handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\r\n        }\r\n        resolve();\r\n      }),\r\n      done(),\r\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\r\n  };\r\n\r\n  public respond: IEngine[\"respond\"] = async (params) => {\r\n    await this.isInitialized();\r\n    await this.isValidRespond(params);\r\n    const { topic, response } = params;\r\n    const { id } = response;\r\n    if (isJsonRpcResult(response)) {\r\n      await this.sendResult({ id, topic, result: response.result, throwOnFailedPublish: true });\r\n    } else if (isJsonRpcError(response)) {\r\n      await this.sendError({ id, topic, error: response.error });\r\n    }\r\n    this.cleanupAfterResponse(params);\r\n  };\r\n\r\n  public ping: IEngine[\"ping\"] = async (params) => {\r\n    await this.isInitialized();\r\n    try {\r\n      await this.isValidPing(params);\r\n    } catch (error) {\r\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\r\n      throw error;\r\n    }\r\n    const { topic } = params;\r\n    if (this.client.session.keys.includes(topic)) {\r\n      const clientRpcId = payloadId();\r\n      const relayRpcId = getBigIntRpcId().toString() as any;\r\n      const { done, resolve, reject } = createDelayedPromise<void>();\r\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\r\n        if (error) reject(error);\r\n        else resolve();\r\n      });\r\n      await Promise.all([\r\n        this.sendRequest({\r\n          topic,\r\n          method: \"wc_sessionPing\",\r\n          params: {},\r\n          throwOnFailedPublish: true,\r\n          clientRpcId,\r\n          relayRpcId,\r\n        }),\r\n        done(),\r\n      ]);\r\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\r\n      await this.client.core.pairing.ping({ topic });\r\n    }\r\n  };\r\n\r\n  public emit: IEngine[\"emit\"] = async (params) => {\r\n    await this.isInitialized();\r\n    await this.isValidEmit(params);\r\n    const { topic, event, chainId } = params;\r\n    const relayRpcId = getBigIntRpcId().toString() as any;\r\n    await this.sendRequest({\r\n      topic,\r\n      method: \"wc_sessionEvent\",\r\n      params: { event, chainId },\r\n      throwOnFailedPublish: true,\r\n      relayRpcId,\r\n    });\r\n  };\r\n\r\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\r\n    await this.isInitialized();\r\n    await this.isValidDisconnect(params);\r\n    const { topic } = params;\r\n    if (this.client.session.keys.includes(topic)) {\r\n      // await an ack to ensure the relay has received the disconnect request\r\n      await this.sendRequest({\r\n        topic,\r\n        method: \"wc_sessionDelete\",\r\n        params: getSdkError(\"USER_DISCONNECTED\"),\r\n        throwOnFailedPublish: true,\r\n      });\r\n      await this.deleteSession({ topic, emitEvent: false });\r\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\r\n      await this.client.core.pairing.disconnect({ topic });\r\n    } else {\r\n      const { message } = getInternalError(\r\n        \"MISMATCHED_TOPIC\",\r\n        `Session or pairing topic not found: ${topic}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  public find: IEngine[\"find\"] = (params) => {\r\n    this.isInitialized();\r\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\r\n  };\r\n\r\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\r\n    return this.client.pendingRequest.getAll();\r\n  };\r\n\r\n  // ---------- Auth ------------------------------------------------ //\r\n\r\n  public authenticate: IEngine[\"authenticate\"] = async (params) => {\r\n    this.isInitialized();\r\n    this.isValidAuthenticate(params);\r\n\r\n    const {\r\n      chains,\r\n      statement = \"\",\r\n      uri,\r\n      domain,\r\n      nonce,\r\n      type,\r\n      exp,\r\n      nbf,\r\n      methods = [],\r\n      expiry,\r\n    } = params;\r\n    // reassign resources to remove reference as the array is modified and might cause side effects\r\n    const resources = [...(params.resources || [])];\r\n\r\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\r\n      methods: [\"wc_sessionAuthenticate\"],\r\n    });\r\n\r\n    this.client.logger.info({\r\n      message: \"Generated new pairing\",\r\n      pairing: { topic: pairingTopic, uri: connectionUri },\r\n    });\r\n\r\n    const publicKey = await this.client.core.crypto.generateKeyPair();\r\n    const responseTopic = hashKey(publicKey);\r\n\r\n    await Promise.all([\r\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\r\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\r\n    ]);\r\n    // Subscribe to response topic\r\n    await this.client.core.relayer.subscribe(responseTopic);\r\n\r\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\r\n\r\n    if (methods.length > 0) {\r\n      const { namespace } = parseChainId(chains[0]);\r\n      let recap = createEncodedRecap(namespace, \"request\", methods);\r\n      const existingRecap = getRecapFromResources(resources);\r\n      if (existingRecap) {\r\n        // per Recaps spec, recap must occupy the last position in the resources array\r\n        // using .pop to remove the element given we already checked it's a recap and will replace it\r\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\r\n        recap = mergedRecap;\r\n      }\r\n      resources.push(recap);\r\n    }\r\n\r\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\r\n    const authRequestExpiry =\r\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\r\n        ? expiry\r\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\r\n\r\n    const request = {\r\n      authPayload: {\r\n        type: type ?? \"caip122\",\r\n        chains,\r\n        statement,\r\n        aud: uri,\r\n        domain,\r\n        version: \"1\",\r\n        nonce,\r\n        iat: new Date().toISOString(),\r\n        exp,\r\n        nbf,\r\n        resources,\r\n      },\r\n      requester: { publicKey, metadata: this.client.metadata },\r\n      expiryTimestamp: calcExpiry(authRequestExpiry),\r\n    };\r\n\r\n    // ----- build namespaces for fallback session proposal ----- //\r\n    const namespaces = {\r\n      eip155: {\r\n        chains,\r\n        // request `personal_sign` method by default to allow for fallback siwe\r\n        methods: [...new Set([\"personal_sign\", ...methods])],\r\n        events: [\"chainChanged\", \"accountsChanged\"],\r\n      },\r\n    };\r\n\r\n    const proposal = {\r\n      requiredNamespaces: {},\r\n      optionalNamespaces: namespaces,\r\n      relays: [{ protocol: \"irn\" }],\r\n      pairingTopic,\r\n      proposer: {\r\n        publicKey,\r\n        metadata: this.client.metadata,\r\n      },\r\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\r\n    };\r\n\r\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\r\n\r\n    // handle fallback session proposal response\r\n    const onSessionConnect = async ({ error, session }: any) => {\r\n      // cleanup listener for authenticate response\r\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\r\n      if (error) reject(error);\r\n      else if (session) {\r\n        session.self.publicKey = publicKey;\r\n        await this.client.session.set(session.topic, session);\r\n        await this.setExpiry(session.topic, session.expiry);\r\n        if (pairingTopic) {\r\n          await this.client.core.pairing.updateMetadata({\r\n            topic: pairingTopic,\r\n            metadata: session.peer.metadata,\r\n          });\r\n        }\r\n        const sessionObject = this.client.session.get(session.topic);\r\n        await this.deleteProposal(fallbackId);\r\n        resolve({\r\n          session: sessionObject,\r\n        });\r\n      }\r\n    };\r\n    // handle session authenticate response\r\n    const onAuthenticate = async (payload: any) => {\r\n      // delete this auth request on response\r\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\r\n      await this.deletePendingAuthRequest(id, { message: \"fulfilled\", code: 0 });\r\n\r\n      if (payload.error) {\r\n        // wallets that do not support wc_sessionAuthenticate will return an error\r\n        // we should not reject the promise in this case as the fallback session proposal will be used\r\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\r\n        if (payload.error.code === error.code) return;\r\n\r\n        // cleanup listener for fallback response\r\n        this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\r\n        return reject(payload.error.message);\r\n      }\r\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\r\n      await this.deleteProposal(fallbackId);\r\n      // cleanup listener for fallback response\r\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\r\n\r\n      const {\r\n        cacaos,\r\n        responder,\r\n      }: {\r\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\r\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\r\n      } = payload.result;\r\n\r\n      const approvedMethods: string[] = [];\r\n      const approvedAccounts: string[] = [];\r\n      for (const cacao of cacaos) {\r\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\r\n        if (!isValid) {\r\n          this.client.logger.error(cacao, \"Signature verification failed\");\r\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\r\n        }\r\n\r\n        const { p: payload } = cacao;\r\n        const recap = getRecapFromResources(payload.resources);\r\n\r\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\r\n        const parsedAddress = getDidAddress(payload.iss) as string;\r\n\r\n        if (recap) {\r\n          const methodsfromRecap = getMethodsFromRecap(recap);\r\n          const chainsFromRecap = getChainsFromRecap(recap);\r\n          approvedMethods.push(...methodsfromRecap);\r\n          approvedChains.push(...chainsFromRecap);\r\n        }\r\n\r\n        for (const chain of approvedChains) {\r\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\r\n        }\r\n      }\r\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\r\n        publicKey,\r\n        responder.publicKey,\r\n      );\r\n\r\n      //create session object\r\n      let session: SessionTypes.Struct | undefined;\r\n\r\n      if (approvedMethods.length > 0) {\r\n        session = {\r\n          topic: sessionTopic,\r\n          acknowledged: true,\r\n          self: {\r\n            publicKey,\r\n            metadata: this.client.metadata,\r\n          },\r\n          peer: responder,\r\n          controller: responder.publicKey,\r\n          expiry: calcExpiry(SESSION_EXPIRY),\r\n          requiredNamespaces: {},\r\n          optionalNamespaces: {},\r\n          relay: { protocol: \"irn\" },\r\n          pairingTopic,\r\n          namespaces: buildNamespacesFromAuth(\r\n            [...new Set(approvedMethods)],\r\n            [...new Set(approvedAccounts)],\r\n          ),\r\n        };\r\n\r\n        await this.client.core.relayer.subscribe(sessionTopic);\r\n        await this.client.session.set(sessionTopic, session);\r\n        if (pairingTopic) {\r\n          await this.client.core.pairing.updateMetadata({\r\n            topic: pairingTopic,\r\n            metadata: responder.metadata,\r\n          });\r\n        }\r\n\r\n        session = this.client.session.get(sessionTopic);\r\n      }\r\n      resolve({\r\n        auths: cacaos,\r\n        session,\r\n      });\r\n    };\r\n\r\n    // set the ids for both requests\r\n    const id = payloadId();\r\n    const fallbackId = payloadId();\r\n\r\n    // subscribe to response events\r\n    this.events.once<\"session_connect\">(engineEvent(\"session_connect\"), onSessionConnect);\r\n    this.events.once(engineEvent(\"session_request\", id), onAuthenticate);\r\n\r\n    try {\r\n      // send both (main & fallback) requests\r\n      await Promise.all([\r\n        this.sendRequest({\r\n          topic: pairingTopic,\r\n          method: \"wc_sessionAuthenticate\",\r\n          params: request,\r\n          expiry: params.expiry,\r\n          throwOnFailedPublish: true,\r\n          clientRpcId: id,\r\n        }),\r\n        this.sendRequest({\r\n          topic: pairingTopic,\r\n          method: \"wc_sessionPropose\",\r\n          params: proposal,\r\n          expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\r\n          throwOnFailedPublish: true,\r\n          clientRpcId: fallbackId,\r\n        }),\r\n      ]);\r\n    } catch (error) {\r\n      // cleanup listeners on failed publish\r\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\r\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\r\n      throw error;\r\n    }\r\n\r\n    await this.setProposal(fallbackId, { id: fallbackId, ...proposal });\r\n    await this.setAuthRequest(id, {\r\n      request: { ...request, verifyContext: {} as any },\r\n      pairingTopic,\r\n    });\r\n\r\n    return {\r\n      uri: connectionUri,\r\n      response: done,\r\n    } as EngineTypes.SessionAuthenticateResponsePromise;\r\n  };\r\n\r\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\r\n    sessionAuthenticateResponseParams,\r\n  ) => {\r\n    this.isInitialized();\r\n\r\n    const { id, auths } = sessionAuthenticateResponseParams;\r\n\r\n    const pendingRequest = this.getPendingAuthRequest(id);\r\n\r\n    if (!pendingRequest) {\r\n      throw new Error(`Could not find pending auth request with id ${id}`);\r\n    }\r\n\r\n    const receiverPublicKey = pendingRequest.requester.publicKey;\r\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\r\n    const responseTopic = hashKey(receiverPublicKey);\r\n\r\n    const encodeOpts = {\r\n      type: TYPE_1,\r\n      receiverPublicKey,\r\n      senderPublicKey,\r\n    };\r\n\r\n    const approvedMethods: string[] = [];\r\n    const approvedAccounts: string[] = [];\r\n    for (const cacao of auths) {\r\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\r\n      if (!isValid) {\r\n        const invalidErr = getSdkError(\r\n          \"SESSION_SETTLEMENT_FAILED\",\r\n          \"Signature verification failed\",\r\n        );\r\n\r\n        await this.sendError({\r\n          id,\r\n          topic: responseTopic,\r\n          error: invalidErr,\r\n          encodeOpts,\r\n        });\r\n\r\n        throw new Error(invalidErr.message);\r\n      }\r\n\r\n      const { p: payload } = cacao;\r\n      const recap = getRecapFromResources(payload.resources);\r\n\r\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\r\n\r\n      const parsedAddress = getDidAddress(payload.iss) as string;\r\n\r\n      if (recap) {\r\n        const methodsfromRecap = getMethodsFromRecap(recap);\r\n        const chainsFromRecap = getChainsFromRecap(recap);\r\n        approvedMethods.push(...methodsfromRecap);\r\n        approvedChains.push(...chainsFromRecap);\r\n      }\r\n      for (const chain of approvedChains) {\r\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\r\n      }\r\n    }\r\n\r\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\r\n      senderPublicKey,\r\n      receiverPublicKey,\r\n    );\r\n    let session: SessionTypes.Struct | undefined;\r\n    if (approvedMethods?.length > 0) {\r\n      session = {\r\n        topic: sessionTopic,\r\n        acknowledged: true,\r\n        self: {\r\n          publicKey: senderPublicKey,\r\n          metadata: this.client.metadata,\r\n        },\r\n        peer: {\r\n          publicKey: receiverPublicKey,\r\n          metadata: pendingRequest.requester.metadata,\r\n        },\r\n        controller: receiverPublicKey,\r\n        expiry: calcExpiry(SESSION_EXPIRY),\r\n        authentication: auths,\r\n        requiredNamespaces: {},\r\n        optionalNamespaces: {},\r\n        relay: { protocol: \"irn\" },\r\n        pairingTopic: pendingRequest.pairingTopic,\r\n        namespaces: buildNamespacesFromAuth(\r\n          [...new Set(approvedMethods)],\r\n          [...new Set(approvedAccounts)],\r\n        ),\r\n      };\r\n\r\n      await this.client.core.relayer.subscribe(sessionTopic);\r\n      await this.client.session.set(sessionTopic, session);\r\n      await this.client.core.pairing.updateMetadata({\r\n        topic: pendingRequest.pairingTopic,\r\n        metadata: pendingRequest.requester.metadata,\r\n      });\r\n    }\r\n\r\n    await this.sendResult<\"wc_sessionAuthenticate\">({\r\n      topic: responseTopic,\r\n      id,\r\n      result: {\r\n        cacaos: auths,\r\n        responder: {\r\n          publicKey: senderPublicKey,\r\n          metadata: this.client.metadata,\r\n        },\r\n      },\r\n      encodeOpts,\r\n      throwOnFailedPublish: true,\r\n    });\r\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\r\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\r\n    return { session };\r\n  };\r\n\r\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\r\n    await this.isInitialized();\r\n\r\n    const { id, reason } = params;\r\n\r\n    const pendingRequest = this.getPendingAuthRequest(id);\r\n\r\n    if (!pendingRequest) {\r\n      throw new Error(`Could not find pending auth request with id ${id}`);\r\n    }\r\n\r\n    const receiverPublicKey = pendingRequest.requester.publicKey;\r\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\r\n    const responseTopic = hashKey(receiverPublicKey);\r\n\r\n    const encodeOpts = {\r\n      type: TYPE_1,\r\n      receiverPublicKey,\r\n      senderPublicKey,\r\n    };\r\n\r\n    await this.sendError({\r\n      id,\r\n      topic: responseTopic,\r\n      error: reason,\r\n      encodeOpts,\r\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\r\n    });\r\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\r\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\r\n  };\r\n\r\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\r\n    this.isInitialized();\r\n    const { request, iss } = params;\r\n    return formatMessage(request, iss);\r\n  };\r\n\r\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\r\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\r\n    setTimeout(async () => {\r\n      if (this.relayMessageCache.length === 0) return;\r\n      while (this.relayMessageCache.length > 0) {\r\n        try {\r\n          const message = this.relayMessageCache.shift();\r\n          if (message) {\r\n            await this.onRelayMessage(message);\r\n          }\r\n        } catch (error) {\r\n          this.client.logger.error(error);\r\n        }\r\n      }\r\n    }, 50);\r\n  };\r\n\r\n  // ---------- Private Helpers --------------------------------------- //\r\n\r\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\r\n    session: SessionTypes.Struct,\r\n  ) => {\r\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\r\n    if (!session.pairingTopic) return;\r\n\r\n    try {\r\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\r\n      const allPairings = this.client.core.pairing.pairings.getAll();\r\n      const duplicates = allPairings.filter(\r\n        (p) =>\r\n          p.peerMetadata?.url &&\r\n          p.peerMetadata?.url === session.peer.metadata.url &&\r\n          p.topic &&\r\n          p.topic !== pairing.topic,\r\n      );\r\n      if (duplicates.length === 0) return;\r\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\r\n      await Promise.all(\r\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\r\n      );\r\n      this.client.logger.info(`Duplicate pairings clean up finished`);\r\n    } catch (error) {\r\n      this.client.logger.error(error);\r\n    }\r\n  };\r\n\r\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\r\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\r\n    const { self } = this.client.session.get(topic);\r\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\r\n    await this.client.core.relayer.unsubscribe(topic);\r\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\r\n    this.addToRecentlyDeleted(topic, \"session\");\r\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\r\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\r\n    }\r\n    if (this.client.core.crypto.keychain.has(topic)) {\r\n      await this.client.core.crypto.deleteSymKey(topic);\r\n    }\r\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\r\n    // remove any deeplinks from storage after the session is deleted\r\n    // to avoid navigating to incorrect deeplink later on\r\n    this.client.core.storage\r\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\r\n      .catch((e) => this.client.logger.warn(e));\r\n    this.getPendingSessionRequests().forEach((r) => {\r\n      if (r.topic === topic) {\r\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\r\n      }\r\n    });\r\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\r\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\r\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\r\n    }\r\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\r\n  };\r\n\r\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\r\n    await Promise.all([\r\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\r\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\r\n    ]);\r\n    this.addToRecentlyDeleted(id, \"proposal\");\r\n  };\r\n\r\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\r\n    id,\r\n    reason,\r\n    expirerHasDeleted = false,\r\n  ) => {\r\n    await Promise.all([\r\n      this.client.pendingRequest.delete(id, reason),\r\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\r\n    ]);\r\n    this.addToRecentlyDeleted(id, \"request\");\r\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\r\n    if (expirerHasDeleted) {\r\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\r\n      this.client.events.emit(\"session_request_expire\", { id });\r\n    }\r\n  };\r\n\r\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\r\n    id,\r\n    reason,\r\n    expirerHasDeleted = false,\r\n  ) => {\r\n    await Promise.all([\r\n      this.client.auth.requests.delete(id, reason),\r\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\r\n    ]);\r\n  };\r\n\r\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\r\n    if (!this.client.session.keys.includes(topic)) return;\r\n    this.client.core.expirer.set(topic, expiry);\r\n    await this.client.session.update(topic, { expiry });\r\n  };\r\n\r\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\r\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\r\n    await this.client.proposal.set(id, proposal);\r\n  };\r\n\r\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\r\n    const { request, pairingTopic } = params;\r\n    this.client.core.expirer.set(id, request.expiryTimestamp);\r\n    await this.client.auth.requests.set(id, {\r\n      authPayload: request.authPayload,\r\n      requester: request.requester,\r\n      expiryTimestamp: request.expiryTimestamp,\r\n      id,\r\n      pairingTopic,\r\n      verifyContext: request.verifyContext,\r\n    });\r\n  };\r\n\r\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\r\n    pendingRequest: PendingRequestTypes.Struct,\r\n  ) => {\r\n    const { id, topic, params, verifyContext } = pendingRequest;\r\n    const expiry =\r\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\r\n    this.client.core.expirer.set(id, expiry);\r\n    await this.client.pendingRequest.set(id, {\r\n      id,\r\n      topic,\r\n      params,\r\n      verifyContext,\r\n    });\r\n  };\r\n\r\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\r\n    const { topic, method, params, expiry, relayRpcId, clientRpcId, throwOnFailedPublish } = args;\r\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\r\n    if (isBrowser() && METHODS_TO_VERIFY.includes(method)) {\r\n      const hash = hashMessage(JSON.stringify(payload));\r\n      this.client.core.verify.register({ attestationId: hash });\r\n    }\r\n    let message;\r\n    try {\r\n      message = await this.client.core.crypto.encode(topic, payload);\r\n    } catch (error) {\r\n      await this.cleanup();\r\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\r\n      throw error;\r\n    }\r\n    const opts = ENGINE_RPC_OPTS[method].req;\r\n    if (expiry) opts.ttl = expiry;\r\n    if (relayRpcId) opts.id = relayRpcId;\r\n    this.client.core.history.set(topic, payload);\r\n    if (throwOnFailedPublish) {\r\n      opts.internal = {\r\n        ...opts.internal,\r\n        throwOnFailedPublish: true,\r\n      };\r\n      await this.client.core.relayer.publish(topic, message, opts);\r\n    } else {\r\n      this.client.core.relayer\r\n        .publish(topic, message, opts)\r\n        .catch((error) => this.client.logger.error(error));\r\n    }\r\n    return payload.id;\r\n  };\r\n\r\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\r\n    const { id, topic, result, throwOnFailedPublish, encodeOpts } = args;\r\n    const payload = formatJsonRpcResult(id, result);\r\n    let message;\r\n    try {\r\n      message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\r\n    } catch (error) {\r\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\r\n      await this.cleanup();\r\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\r\n      throw error;\r\n    }\r\n    let record;\r\n    try {\r\n      record = await this.client.core.history.get(topic, id);\r\n    } catch (error) {\r\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\r\n      throw error;\r\n    }\r\n    const opts = ENGINE_RPC_OPTS[record.request.method].res;\r\n    if (throwOnFailedPublish) {\r\n      opts.internal = {\r\n        ...opts.internal,\r\n        throwOnFailedPublish: true,\r\n      };\r\n      await this.client.core.relayer.publish(topic, message, opts);\r\n    } else {\r\n      this.client.core.relayer\r\n        .publish(topic, message, opts)\r\n        .catch((error) => this.client.logger.error(error));\r\n    }\r\n    await this.client.core.history.resolve(payload);\r\n  };\r\n\r\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\r\n    const { id, topic, error, encodeOpts, rpcOpts } = params;\r\n    const payload = formatJsonRpcError(id, error);\r\n    let message;\r\n    try {\r\n      message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\r\n    } catch (error) {\r\n      await this.cleanup();\r\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\r\n      throw error;\r\n    }\r\n    let record;\r\n    try {\r\n      record = await this.client.core.history.get(topic, id);\r\n    } catch (error) {\r\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\r\n      throw error;\r\n    }\r\n    const opts = rpcOpts || ENGINE_RPC_OPTS[record.request.method].res;\r\n    // await is intentionally omitted to speed up performance\r\n    this.client.core.relayer.publish(topic, message, opts);\r\n    await this.client.core.history.resolve(payload);\r\n  };\r\n\r\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\r\n    const sessionTopics: string[] = [];\r\n    const proposalIds: number[] = [];\r\n    this.client.session.getAll().forEach((session) => {\r\n      let toCleanup = false;\r\n      if (isExpired(session.expiry)) toCleanup = true;\r\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\r\n      if (toCleanup) sessionTopics.push(session.topic);\r\n    });\r\n    this.client.proposal.getAll().forEach((proposal) => {\r\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\r\n    });\r\n    await Promise.all([\r\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\r\n      ...proposalIds.map((id) => this.deleteProposal(id)),\r\n    ]);\r\n  };\r\n\r\n  private async isInitialized() {\r\n    if (!this.initialized) {\r\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\r\n      throw new Error(message);\r\n    }\r\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\r\n  }\r\n\r\n  // ---------- Relay Events Router ----------------------------------- //\r\n\r\n  private registerRelayerEvents() {\r\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\r\n      // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\r\n      if (!this.initialized || this.relayMessageCache.length > 0) {\r\n        this.relayMessageCache.push(event);\r\n      } else {\r\n        this.onRelayMessage(event);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\r\n    const { topic, message } = event;\r\n\r\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\r\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\r\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\r\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\r\n\r\n    const payload = await this.client.core.crypto.decode(topic, message, {\r\n      receiverPublicKey: publicKey,\r\n    });\r\n\r\n    try {\r\n      if (isJsonRpcRequest(payload)) {\r\n        this.client.core.history.set(topic, payload);\r\n        this.onRelayEventRequest({ topic, payload });\r\n      } else if (isJsonRpcResponse(payload)) {\r\n        await this.client.core.history.resolve(payload);\r\n        await this.onRelayEventResponse({ topic, payload });\r\n        this.client.core.history.delete(topic, payload.id);\r\n      } else {\r\n        this.onRelayEventUnknownPayload({ topic, payload });\r\n      }\r\n    } catch (error) {\r\n      this.client.logger.error(error);\r\n    }\r\n  }\r\n\r\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\r\n    this.requestQueue.queue.push(event);\r\n    await this.processRequestsQueue();\r\n  };\r\n\r\n  private processRequestsQueue = async () => {\r\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\r\n      this.client.logger.info(`Request queue already active, skipping...`);\r\n      return;\r\n    }\r\n\r\n    this.client.logger.info(\r\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\r\n    );\r\n\r\n    while (this.requestQueue.queue.length > 0) {\r\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\r\n      const request = this.requestQueue.queue.shift();\r\n      if (!request) continue;\r\n\r\n      try {\r\n        await this.processRequest(request);\r\n      } catch (error) {\r\n        this.client.logger.warn(error);\r\n      }\r\n    }\r\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\r\n  };\r\n\r\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\r\n    const { topic, payload } = event;\r\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\r\n\r\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\r\n      return;\r\n    }\r\n\r\n    switch (reqMethod) {\r\n      case \"wc_sessionPropose\":\r\n        return await this.onSessionProposeRequest(topic, payload);\r\n      case \"wc_sessionSettle\":\r\n        return await this.onSessionSettleRequest(topic, payload);\r\n      case \"wc_sessionUpdate\":\r\n        return await this.onSessionUpdateRequest(topic, payload);\r\n      case \"wc_sessionExtend\":\r\n        return await this.onSessionExtendRequest(topic, payload);\r\n      case \"wc_sessionPing\":\r\n        return await this.onSessionPingRequest(topic, payload);\r\n      case \"wc_sessionDelete\":\r\n        return await this.onSessionDeleteRequest(topic, payload);\r\n      case \"wc_sessionRequest\":\r\n        return await this.onSessionRequest(topic, payload);\r\n      case \"wc_sessionEvent\":\r\n        return await this.onSessionEventRequest(topic, payload);\r\n      case \"wc_sessionAuthenticate\":\r\n        return await this.onSessionAuthenticateRequest(topic, payload);\r\n      default:\r\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\r\n    }\r\n  };\r\n\r\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\r\n    const { topic, payload } = event;\r\n    const record = await this.client.core.history.get(topic, payload.id);\r\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\r\n    switch (resMethod) {\r\n      case \"wc_sessionPropose\":\r\n        return this.onSessionProposeResponse(topic, payload);\r\n      case \"wc_sessionSettle\":\r\n        return this.onSessionSettleResponse(topic, payload);\r\n      case \"wc_sessionUpdate\":\r\n        return this.onSessionUpdateResponse(topic, payload);\r\n      case \"wc_sessionExtend\":\r\n        return this.onSessionExtendResponse(topic, payload);\r\n      case \"wc_sessionPing\":\r\n        return this.onSessionPingResponse(topic, payload);\r\n      case \"wc_sessionRequest\":\r\n        return this.onSessionRequestResponse(topic, payload);\r\n      case \"wc_sessionAuthenticate\":\r\n        return this.onSessionAuthenticateResponse(topic, payload);\r\n      default:\r\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\r\n    }\r\n  };\r\n\r\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\r\n    const { topic } = event;\r\n    const { message } = getInternalError(\r\n      \"MISSING_OR_INVALID\",\r\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\r\n    );\r\n    throw new Error(message);\r\n  };\r\n\r\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\r\n    const { topic, requestMethod } = params;\r\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\r\n    // check if the request method matches the expected method\r\n    if (!expectedMethods) return false;\r\n    if (expectedMethods.includes(requestMethod)) return false;\r\n\r\n    /**\r\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\r\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\r\n     */\r\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\r\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // ---------- Relay Events Handlers --------------------------------- //\r\n\r\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { params, id } = payload;\r\n    try {\r\n      this.isValidConnect({ ...payload.params });\r\n      const expiryTimestamp =\r\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\r\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\r\n      await this.setProposal(id, proposal);\r\n      const hash = hashMessage(JSON.stringify(payload));\r\n      const verifyContext = await this.getVerifyContext(hash, proposal.proposer.metadata);\r\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\r\n    } catch (err: any) {\r\n      await this.sendError({\r\n        id,\r\n        topic,\r\n        error: err,\r\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\r\n      });\r\n      this.client.logger.error(err);\r\n    }\r\n  };\r\n\r\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { id } = payload;\r\n    if (isJsonRpcResult(payload)) {\r\n      const { result } = payload;\r\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\r\n      const proposal = this.client.proposal.get(id);\r\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\r\n      const selfPublicKey = proposal.proposer.publicKey;\r\n      this.client.logger.trace({\r\n        type: \"method\",\r\n        method: \"onSessionProposeResponse\",\r\n        selfPublicKey,\r\n      });\r\n      const peerPublicKey = result.responderPublicKey;\r\n      this.client.logger.trace({\r\n        type: \"method\",\r\n        method: \"onSessionProposeResponse\",\r\n        peerPublicKey,\r\n      });\r\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\r\n        selfPublicKey,\r\n        peerPublicKey,\r\n      );\r\n      this.client.logger.trace({\r\n        type: \"method\",\r\n        method: \"onSessionProposeResponse\",\r\n        sessionTopic,\r\n      });\r\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic);\r\n      this.client.logger.trace({\r\n        type: \"method\",\r\n        method: \"onSessionProposeResponse\",\r\n        subscriptionId,\r\n      });\r\n      await this.client.core.pairing.activate({ topic });\r\n    } else if (isJsonRpcError(payload)) {\r\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\r\n      const target = engineEvent(\"session_connect\");\r\n      const listeners = this.events.listenerCount(target);\r\n      if (listeners === 0) {\r\n        throw new Error(`emitting ${target} without any listeners, 954`);\r\n      }\r\n      this.events.emit(engineEvent(\"session_connect\"), { error: payload.error });\r\n    }\r\n  };\r\n\r\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { id, params } = payload;\r\n    try {\r\n      this.isValidSessionSettleRequest(params);\r\n      const { relay, controller, expiry, namespaces, sessionProperties, sessionConfig } =\r\n        payload.params;\r\n      const session = {\r\n        topic,\r\n        relay,\r\n        expiry,\r\n        namespaces,\r\n        acknowledged: true,\r\n        pairingTopic: \"\", // pairingTopic will be set in the `session_connect` handler\r\n        requiredNamespaces: {},\r\n        optionalNamespaces: {},\r\n        controller: controller.publicKey,\r\n        self: {\r\n          publicKey: \"\",\r\n          metadata: this.client.metadata,\r\n        },\r\n        peer: {\r\n          publicKey: controller.publicKey,\r\n          metadata: controller.metadata,\r\n        },\r\n        ...(sessionProperties && { sessionProperties }),\r\n        ...(sessionConfig && { sessionConfig }),\r\n      };\r\n      await this.sendResult<\"wc_sessionSettle\">({\r\n        id: payload.id,\r\n        topic,\r\n        result: true,\r\n        throwOnFailedPublish: true,\r\n      });\r\n      const target = engineEvent(\"session_connect\");\r\n      const listeners = this.events.listenerCount(target);\r\n      if (listeners === 0) {\r\n        throw new Error(`emitting ${target} without any listeners 997`);\r\n      }\r\n      this.events.emit(engineEvent(\"session_connect\"), { session });\r\n    } catch (err: any) {\r\n      await this.sendError({\r\n        id,\r\n        topic,\r\n        error: err,\r\n      });\r\n      this.client.logger.error(err);\r\n    }\r\n  };\r\n\r\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { id } = payload;\r\n    if (isJsonRpcResult(payload)) {\r\n      await this.client.session.update(topic, { acknowledged: true });\r\n      this.events.emit(engineEvent(\"session_approve\", id), {});\r\n    } else if (isJsonRpcError(payload)) {\r\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\r\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\r\n    }\r\n  };\r\n\r\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { params, id } = payload;\r\n    try {\r\n      const memoryKey = `${topic}_session_update`;\r\n      // compare the current request id with the last processed session update\r\n      // we want to update only if the request is newer than the last processed one\r\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\r\n\r\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\r\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\r\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\r\n        return;\r\n      }\r\n      this.isValidUpdate({ topic, ...params });\r\n      try {\r\n        MemoryStore.set(memoryKey, id);\r\n        await this.client.session.update(topic, { namespaces: params.namespaces });\r\n        await this.sendResult<\"wc_sessionUpdate\">({\r\n          id,\r\n          topic,\r\n          result: true,\r\n          throwOnFailedPublish: true,\r\n        });\r\n      } catch (e) {\r\n        MemoryStore.delete(memoryKey);\r\n        throw e;\r\n      }\r\n\r\n      this.client.events.emit(\"session_update\", { id, topic, params });\r\n    } catch (err: any) {\r\n      await this.sendError({\r\n        id,\r\n        topic,\r\n        error: err,\r\n      });\r\n      this.client.logger.error(err);\r\n    }\r\n  };\r\n\r\n  // compares the timestamp of the last processed request with the current request\r\n  // client <-> client rpc ID is timestamp + 3 random digits\r\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\r\n    return parseInt(currentId.toString().slice(0, -3)) <= parseInt(lastId.toString().slice(0, -3));\r\n  };\r\n\r\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\r\n    const { id } = payload;\r\n    const target = engineEvent(\"session_update\", id);\r\n    const listeners = this.events.listenerCount(target);\r\n    if (listeners === 0) {\r\n      throw new Error(`emitting ${target} without any listeners`);\r\n    }\r\n    if (isJsonRpcResult(payload)) {\r\n      this.events.emit(engineEvent(\"session_update\", id), {});\r\n    } else if (isJsonRpcError(payload)) {\r\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\r\n    }\r\n  };\r\n\r\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { id } = payload;\r\n    try {\r\n      this.isValidExtend({ topic });\r\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\r\n      await this.sendResult<\"wc_sessionExtend\">({\r\n        id,\r\n        topic,\r\n        result: true,\r\n        throwOnFailedPublish: true,\r\n      });\r\n      this.client.events.emit(\"session_extend\", { id, topic });\r\n    } catch (err: any) {\r\n      await this.sendError({\r\n        id,\r\n        topic,\r\n        error: err,\r\n      });\r\n      this.client.logger.error(err);\r\n    }\r\n  };\r\n\r\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\r\n    const { id } = payload;\r\n    const target = engineEvent(\"session_extend\", id);\r\n    const listeners = this.events.listenerCount(target);\r\n    if (listeners === 0) {\r\n      throw new Error(`emitting ${target} without any listeners`);\r\n    }\r\n    if (isJsonRpcResult(payload)) {\r\n      this.events.emit(engineEvent(\"session_extend\", id), {});\r\n    } else if (isJsonRpcError(payload)) {\r\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\r\n    }\r\n  };\r\n\r\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\r\n    const { id } = payload;\r\n    try {\r\n      this.isValidPing({ topic });\r\n      await this.sendResult<\"wc_sessionPing\">({\r\n        id,\r\n        topic,\r\n        result: true,\r\n        throwOnFailedPublish: true,\r\n      });\r\n      this.client.events.emit(\"session_ping\", { id, topic });\r\n    } catch (err: any) {\r\n      await this.sendError({\r\n        id,\r\n        topic,\r\n        error: err,\r\n      });\r\n      this.client.logger.error(err);\r\n    }\r\n  };\r\n\r\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\r\n    const { id } = payload;\r\n    const target = engineEvent(\"session_ping\", id);\r\n    const listeners = this.events.listenerCount(target);\r\n    if (listeners === 0) {\r\n      throw new Error(`emitting ${target} without any listeners`);\r\n    }\r\n    // put at the end of the stack to avoid a race condition\r\n    // where session_ping listener is not yet initialized\r\n    setTimeout(() => {\r\n      if (isJsonRpcResult(payload)) {\r\n        this.events.emit(engineEvent(\"session_ping\", id), {});\r\n      } else if (isJsonRpcError(payload)) {\r\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { id } = payload;\r\n    try {\r\n      this.isValidDisconnect({ topic, reason: payload.params });\r\n      await Promise.all([\r\n        new Promise((resolve) => {\r\n          // RPC request needs to happen before deletion as it utalises session encryption\r\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\r\n            resolve(await this.deleteSession({ topic, id }));\r\n          });\r\n        }),\r\n        this.sendResult<\"wc_sessionDelete\">({\r\n          id,\r\n          topic,\r\n          result: true,\r\n          throwOnFailedPublish: true,\r\n        }),\r\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\r\n      ]);\r\n    } catch (err: any) {\r\n      this.client.logger.error(err);\r\n    }\r\n  };\r\n\r\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (topic, payload) => {\r\n    const { id, params } = payload;\r\n    try {\r\n      await this.isValidRequest({ topic, ...params });\r\n      const hash = hashMessage(\r\n        JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id)),\r\n      );\r\n      const session = this.client.session.get(topic);\r\n      const verifyContext = await this.getVerifyContext(hash, session.peer.metadata);\r\n      const request = {\r\n        id,\r\n        topic,\r\n        params,\r\n        verifyContext,\r\n      };\r\n      await this.setPendingSessionRequest(request);\r\n      if (this.client.signConfig?.disableRequestQueue) {\r\n        this.emitSessionRequest(request);\r\n      } else {\r\n        this.addSessionRequestToSessionRequestQueue(request);\r\n        this.processSessionRequestQueue();\r\n      }\r\n    } catch (err: any) {\r\n      await this.sendError({\r\n        id,\r\n        topic,\r\n        error: err,\r\n      });\r\n      this.client.logger.error(err);\r\n    }\r\n  };\r\n\r\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\r\n    _topic,\r\n    payload,\r\n  ) => {\r\n    const { id } = payload;\r\n    const target = engineEvent(\"session_request\", id);\r\n    const listeners = this.events.listenerCount(target);\r\n    if (listeners === 0) {\r\n      throw new Error(`emitting ${target} without any listeners`);\r\n    }\r\n    if (isJsonRpcResult(payload)) {\r\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\r\n    } else if (isJsonRpcError(payload)) {\r\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\r\n    }\r\n  };\r\n\r\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { id, params } = payload;\r\n    try {\r\n      // similar to session update, we want to discard out of sync requests\r\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\r\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\r\n      // compare the current request id with the last processed session update\r\n      // we want to update only if the request is newer than the last processed one\r\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\r\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\r\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\r\n        return;\r\n      }\r\n\r\n      this.isValidEmit({ topic, ...params });\r\n      this.client.events.emit(\"session_event\", { id, topic, params });\r\n      MemoryStore.set(memoryKey, id);\r\n    } catch (err: any) {\r\n      await this.sendError({\r\n        id,\r\n        topic,\r\n        error: err,\r\n      });\r\n      this.client.logger.error(err);\r\n    }\r\n  };\r\n\r\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    const { id } = payload;\r\n    this.client.logger.trace({\r\n      type: \"method\",\r\n      method: \"onSessionAuthenticateResponse\",\r\n      topic,\r\n      payload,\r\n    });\r\n    if (isJsonRpcResult(payload)) {\r\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\r\n    } else if (isJsonRpcError(payload)) {\r\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\r\n    }\r\n  };\r\n\r\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\r\n    topic,\r\n    payload,\r\n  ) => {\r\n    try {\r\n      const { requester, authPayload, expiryTimestamp } = payload.params;\r\n      const hash = hashMessage(JSON.stringify(payload));\r\n      const verifyContext = await this.getVerifyContext(hash, this.client.metadata);\r\n      const pendingRequest = {\r\n        requester,\r\n        pairingTopic: topic,\r\n        id: payload.id,\r\n        authPayload,\r\n        verifyContext,\r\n        expiryTimestamp,\r\n      };\r\n      await this.setAuthRequest(payload.id, { request: pendingRequest, pairingTopic: topic });\r\n      this.client.events.emit(\"session_authenticate\", {\r\n        topic,\r\n        params: payload.params,\r\n        id: payload.id,\r\n        verifyContext,\r\n      });\r\n    } catch (err: any) {\r\n      this.client.logger.error(err);\r\n\r\n      const receiverPublicKey = payload.params.requester.publicKey;\r\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\r\n\r\n      const encodeOpts = {\r\n        type: TYPE_1,\r\n        receiverPublicKey,\r\n        senderPublicKey,\r\n      };\r\n      await this.sendError({\r\n        id: payload.id,\r\n        topic,\r\n        error: err,\r\n        encodeOpts,\r\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\r\n      });\r\n    }\r\n  };\r\n\r\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\r\n    this.sessionRequestQueue.queue.push(request);\r\n  };\r\n\r\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\r\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\r\n    // intentionally delay the emitting of the next pending request a bit\r\n    setTimeout(() => {\r\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\r\n      this.processSessionRequestQueue();\r\n    }, toMiliseconds(this.requestQueueDelay));\r\n  };\r\n\r\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\r\n  private cleanupPendingSentRequestsForTopic = ({\r\n    topic,\r\n    error,\r\n  }: {\r\n    topic: string;\r\n    error: ErrorResponse;\r\n  }) => {\r\n    const pendingRequests = this.client.core.history.pending;\r\n    if (pendingRequests.length > 0) {\r\n      const forSession = pendingRequests.filter(\r\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\r\n      );\r\n      forSession.forEach((r) => {\r\n        const id = r.request.id;\r\n        const target = engineEvent(\"session_request\", id);\r\n        const listeners = this.events.listenerCount(target);\r\n        if (listeners === 0) {\r\n          throw new Error(`emitting ${target} without any listeners`);\r\n        }\r\n        // notify .request() handler of the rejection\r\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\r\n          error,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  private processSessionRequestQueue = () => {\r\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\r\n      this.client.logger.info(\"session request queue is already active.\");\r\n      return;\r\n    }\r\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\r\n    const request = this.sessionRequestQueue.queue[0];\r\n    if (!request) {\r\n      this.client.logger.info(\"session request queue is empty.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\r\n      this.emitSessionRequest(request);\r\n    } catch (error) {\r\n      this.client.logger.error(error);\r\n    }\r\n  };\r\n\r\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\r\n    this.client.events.emit(\"session_request\", request);\r\n  };\r\n\r\n  // ---------- Expirer Events ---------------------------------------- //\r\n\r\n  private registerExpirerEvents() {\r\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\r\n      const { topic, id } = parseExpirerTarget(event.target);\r\n      if (id && this.client.pendingRequest.keys.includes(id)) {\r\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\r\n      }\r\n      if (id && this.client.auth.requests.keys.includes(id)) {\r\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\r\n      }\r\n\r\n      if (topic) {\r\n        if (this.client.session.keys.includes(topic)) {\r\n          await this.deleteSession({ topic, expirerHasDeleted: true });\r\n          this.client.events.emit(\"session_expire\", { topic });\r\n        }\r\n      } else if (id) {\r\n        await this.deleteProposal(id, true);\r\n        this.client.events.emit(\"proposal_expire\", { id });\r\n      }\r\n    });\r\n  }\r\n\r\n  // ---------- Pairing Events ---------------------------------------- //\r\n  private registerPairingEvents() {\r\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\r\n      this.onPairingCreated(pairing),\r\n    );\r\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\r\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\r\n    });\r\n  }\r\n\r\n  /**\r\n   * when a pairing is created, we check if there is a pending proposal for it.\r\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\r\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\r\n   */\r\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\r\n    if (pairing.methods) {\r\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\r\n    }\r\n    if (pairing.active) return;\r\n    const proposals = this.client.proposal.getAll();\r\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\r\n    if (!proposal) return;\r\n    this.onSessionProposeRequest(\r\n      pairing.topic,\r\n      formatJsonRpcRequest(\r\n        \"wc_sessionPropose\",\r\n        {\r\n          requiredNamespaces: proposal.requiredNamespaces,\r\n          optionalNamespaces: proposal.optionalNamespaces,\r\n          relays: proposal.relays,\r\n          proposer: proposal.proposer,\r\n          sessionProperties: proposal.sessionProperties,\r\n        },\r\n        proposal.id,\r\n      ),\r\n    );\r\n  };\r\n\r\n  // ---------- Validation Helpers ------------------------------------ //\r\n  private isValidPairingTopic(topic: any) {\r\n    if (!isValidString(topic, false)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `pairing topic should be a string: ${topic}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\r\n      const { message } = getInternalError(\r\n        \"NO_MATCHING_KEY\",\r\n        `pairing topic doesn't exist: ${topic}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\r\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  private async isValidSessionTopic(topic: any) {\r\n    if (!isValidString(topic, false)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `session topic should be a string: ${topic}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    // Store will throw custom message if topic was recently deleted\r\n    this.checkRecentlyDeleted(topic);\r\n    if (!this.client.session.keys.includes(topic)) {\r\n      const { message } = getInternalError(\r\n        \"NO_MATCHING_KEY\",\r\n        `session topic doesn't exist: ${topic}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    if (isExpired(this.client.session.get(topic).expiry)) {\r\n      await this.deleteSession({ topic });\r\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\r\n      throw new Error(message);\r\n    }\r\n\r\n    if (!this.client.core.crypto.keychain.has(topic)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `session topic does not exist in keychain: ${topic}`,\r\n      );\r\n      await this.deleteSession({ topic });\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  private async isValidSessionOrPairingTopic(topic: string) {\r\n    this.checkRecentlyDeleted(topic);\r\n    if (this.client.session.keys.includes(topic)) {\r\n      await this.isValidSessionTopic(topic);\r\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\r\n      this.isValidPairingTopic(topic);\r\n    } else if (!isValidString(topic, false)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `session or pairing topic should be a string: ${topic}`,\r\n      );\r\n      throw new Error(message);\r\n    } else {\r\n      const { message } = getInternalError(\r\n        \"NO_MATCHING_KEY\",\r\n        `session or pairing topic doesn't exist: ${topic}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  private async isValidProposalId(id: any) {\r\n    if (!isValidId(id)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `proposal id should be a number: ${id}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    if (!this.client.proposal.keys.includes(id)) {\r\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\r\n      throw new Error(message);\r\n    }\r\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\r\n      await this.deleteProposal(id);\r\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  // ---------- Validation  ------------------------------------------- //\r\n\r\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `connect() params: ${JSON.stringify(params)}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\r\n      params;\r\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\r\n\r\n    if (!isValidRelays(relays, true)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\r\n      throw new Error(message);\r\n    }\r\n\r\n    // validate required namespaces only if they are defined\r\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\r\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\r\n    }\r\n\r\n    // validate optional namespaces only if they are defined\r\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\r\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\r\n    }\r\n\r\n    // validate session properties only if they are defined\r\n    if (!isUndefined(sessionProperties)) {\r\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\r\n    }\r\n  };\r\n\r\n  private validateNamespaces = (\r\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\r\n    type: string,\r\n  ) => {\r\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\r\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\r\n  };\r\n\r\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\r\n    if (!isValidParams(params))\r\n      throw new Error(\r\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\r\n      );\r\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\r\n\r\n    this.checkRecentlyDeleted(id);\r\n    await this.isValidProposalId(id);\r\n    const proposal = this.client.proposal.get(id);\r\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\r\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\r\n    const conformingNamespacesError = isConformingNamespaces(\r\n      proposal.requiredNamespaces,\r\n      namespaces,\r\n      \"approve()\",\r\n    );\r\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\r\n    if (!isValidString(relayProtocol, true)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `approve() relayProtocol: ${relayProtocol}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n\r\n    if (!isUndefined(sessionProperties)) {\r\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\r\n    }\r\n  };\r\n\r\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\r\n      throw new Error(message);\r\n    }\r\n    const { id, reason } = params;\r\n    this.checkRecentlyDeleted(id);\r\n    await this.isValidProposalId(id);\r\n    if (!isValidErrorReason(reason)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `reject() reason: ${JSON.stringify(reason)}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `onSessionSettleRequest() params: ${params}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    const { relay, controller, namespaces, expiry } = params;\r\n    if (!isValidRelay(relay)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `onSessionSettleRequest() relay protocol should be a string`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\r\n    if (validControllerError) throw new Error(validControllerError.message);\r\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\r\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\r\n    if (isExpired(expiry)) {\r\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\r\n      throw new Error(message);\r\n    }\r\n    const { topic, namespaces } = params;\r\n\r\n    this.checkRecentlyDeleted(topic);\r\n    await this.isValidSessionTopic(topic);\r\n    const session = this.client.session.get(topic);\r\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\r\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\r\n    const conformingNamespacesError = isConformingNamespaces(\r\n      session.requiredNamespaces,\r\n      namespaces,\r\n      \"update()\",\r\n    );\r\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\r\n    // TODO(ilja) - check if wallet\r\n  };\r\n\r\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\r\n      throw new Error(message);\r\n    }\r\n    const { topic } = params;\r\n\r\n    this.checkRecentlyDeleted(topic);\r\n    await this.isValidSessionTopic(topic);\r\n  };\r\n\r\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\r\n      throw new Error(message);\r\n    }\r\n    const { topic, request, chainId, expiry } = params;\r\n    this.checkRecentlyDeleted(topic);\r\n    await this.isValidSessionTopic(topic);\r\n    const { namespaces } = this.client.session.get(topic);\r\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\r\n      throw new Error(message);\r\n    }\r\n    if (!isValidRequest(request)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `request() ${JSON.stringify(request)}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `request() method: ${request.method}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\r\n      throw new Error(message);\r\n    }\r\n    const { topic, response } = params;\r\n    try {\r\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\r\n      await this.isValidSessionTopic(topic);\r\n    } catch (error) {\r\n      if (params?.response?.id) this.cleanupAfterResponse(params);\r\n      throw error;\r\n    }\r\n    if (!isValidResponse(response)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `respond() response: ${JSON.stringify(response)}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\r\n      throw new Error(message);\r\n    }\r\n    const { topic } = params;\r\n    await this.isValidSessionOrPairingTopic(topic);\r\n  };\r\n\r\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\r\n      throw new Error(message);\r\n    }\r\n    const { topic, event, chainId } = params;\r\n    await this.isValidSessionTopic(topic);\r\n    const { namespaces } = this.client.session.get(topic);\r\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\r\n      throw new Error(message);\r\n    }\r\n    if (!isValidEvent(event)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `emit() event: ${JSON.stringify(event)}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `emit() event: ${JSON.stringify(event)}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\r\n    if (!isValidParams(params)) {\r\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\r\n      throw new Error(message);\r\n    }\r\n    const { topic } = params;\r\n    await this.isValidSessionOrPairingTopic(topic);\r\n  };\r\n\r\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\r\n    const { chains, uri, domain, nonce } = params;\r\n\r\n    // ----- validate params ----- //\r\n    if (!Array.isArray(chains) || chains.length === 0) {\r\n      throw new Error(\"chains is required and must be a non-empty array\");\r\n    }\r\n    if (!isValidString(uri, false)) {\r\n      throw new Error(\"uri is required parameter\");\r\n    }\r\n    if (!isValidString(domain, false)) {\r\n      throw new Error(\"domain is required parameter\");\r\n    }\r\n    if (!isValidString(nonce, false)) {\r\n      throw new Error(\"nonce is required parameter\");\r\n    }\r\n\r\n    // ----- reject multi namespaces ----- //\r\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\r\n    if (uniqueNamespaces.length > 1) {\r\n      throw new Error(\r\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\r\n      );\r\n    }\r\n\r\n    const { namespace } = parseChainId(chains[0]);\r\n    if (namespace !== \"eip155\") {\r\n      throw new Error(\r\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\r\n      );\r\n    }\r\n  };\r\n\r\n  private getVerifyContext = async (hash: string, metadata: CoreTypes.Metadata) => {\r\n    const context: Verify.Context = {\r\n      verified: {\r\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\r\n        validation: \"UNKNOWN\",\r\n        origin: metadata.url || \"\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const result = await this.client.core.verify.resolve({\r\n        attestationId: hash,\r\n        verifyUrl: metadata.verifyUrl,\r\n      });\r\n      if (result) {\r\n        context.verified.origin = result.origin;\r\n        context.verified.isScam = result.isScam;\r\n        context.verified.validation =\r\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\r\n      }\r\n    } catch (e) {\r\n      this.client.logger.info(e);\r\n    }\r\n\r\n    this.client.logger.info(`Verify context: ${JSON.stringify(context)}`);\r\n    return context;\r\n  };\r\n\r\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\r\n    Object.values(properties).forEach((property) => {\r\n      if (!isValidString(property, false)) {\r\n        const { message } = getInternalError(\r\n          \"MISSING_OR_INVALID\",\r\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\r\n        );\r\n        throw new Error(message);\r\n      }\r\n    });\r\n  };\r\n\r\n  private getPendingAuthRequest = (id: number) => {\r\n    const request = this.client.auth.requests.get(id);\r\n    return typeof request === \"object\" ? request : undefined;\r\n  };\r\n\r\n  private addToRecentlyDeleted = (\r\n    id: string | number,\r\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\r\n  ) => {\r\n    this.recentlyDeletedMap.set(id, type);\r\n    // remove first half of the map if it exceeds the limit\r\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\r\n      let i = 0;\r\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\r\n      for (const k of this.recentlyDeletedMap.keys()) {\r\n        if (i++ >= numItemsToDelete) {\r\n          break;\r\n        }\r\n        this.recentlyDeletedMap.delete(k);\r\n      }\r\n    }\r\n  };\r\n\r\n  private checkRecentlyDeleted = (id: string | number) => {\r\n    const deletedRecord = this.recentlyDeletedMap.get(id);\r\n    if (deletedRecord) {\r\n      const { message } = getInternalError(\r\n        \"MISSING_OR_INVALID\",\r\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\r\n      );\r\n      throw new Error(message);\r\n    }\r\n  };\r\n}\r\n","import { Store } from \"@walletconnect/core\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\r\n\r\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\r\n\r\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\r\n  }\r\n}\r\n","import { Store } from \"@walletconnect/core\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\r\n\r\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\r\n\r\nexport class Session extends Store<string, SessionTypes.Struct> {\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\r\n  }\r\n}\r\n","import { Store } from \"@walletconnect/core\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\r\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\r\n\r\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    super(\r\n      core,\r\n      logger,\r\n      REQUEST_CONTEXT,\r\n      SIGN_CLIENT_STORAGE_PREFIX,\r\n      (val: PendingRequestTypes.Struct) => val.id,\r\n    );\r\n  }\r\n}\r\n","import { Store } from \"@walletconnect/core\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { ICore } from \"@walletconnect/types\";\r\n\r\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\r\n\r\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\r\n  }\r\n}\r\n","import { Store } from \"@walletconnect/core\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { ICore } from \"@walletconnect/types\";\r\n\r\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\r\n\r\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\r\n  }\r\n}\r\n","import { Store } from \"@walletconnect/core\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\r\n\r\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\r\n\r\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    super(\r\n      core,\r\n      logger,\r\n      AUTH_REQUEST_CONTEXT,\r\n      AUTH_STORAGE_PREFIX,\r\n      (val: AuthTypes.PendingRequest) => val.id,\r\n    );\r\n  }\r\n}\r\n","import { Logger } from \"@walletconnect/logger\";\r\nimport { IAuth, ICore } from \"@walletconnect/types\";\r\nimport { AuthPairingTopic } from \"./authPairingTopic\";\r\nimport { AuthRequest } from \"./authRequest\";\r\nimport { AuthKey } from \"./authKey\";\r\n\r\nexport class AuthStore {\r\n  public authKeys: IAuth[\"authKeys\"];\r\n  public pairingTopics: IAuth[\"pairingTopics\"];\r\n  public requests: IAuth[\"requests\"];\r\n\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    this.authKeys = new AuthKey(this.core, this.logger);\r\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\r\n    this.requests = new AuthRequest(this.core, this.logger);\r\n  }\r\n\r\n  public async init() {\r\n    await this.authKeys.init();\r\n    await this.pairingTopics.init();\r\n    await this.requests.init();\r\n  }\r\n}\r\n","import { Core } from \"@walletconnect/core\";\r\nimport {\r\n  generateChildLogger,\r\n  getDefaultLoggerOptions,\r\n  getLoggerContext,\r\n  pino,\r\n} from \"@walletconnect/logger\";\r\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\r\nimport { getAppMetadata } from \"@walletconnect/utils\";\r\nimport { EventEmitter } from \"events\";\r\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\r\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\r\n\r\nexport class SignClient extends ISignClient {\r\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\r\n  public readonly version = SIGN_CLIENT_VERSION;\r\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\r\n  public readonly metadata: ISignClient[\"metadata\"];\r\n\r\n  public core: ISignClient[\"core\"];\r\n  public logger: ISignClient[\"logger\"];\r\n  public events: ISignClient[\"events\"] = new EventEmitter();\r\n  public engine: ISignClient[\"engine\"];\r\n  public session: ISignClient[\"session\"];\r\n  public proposal: ISignClient[\"proposal\"];\r\n  public pendingRequest: ISignClient[\"pendingRequest\"];\r\n  public auth: ISignClient[\"auth\"];\r\n  public signConfig?: ISignClient[\"signConfig\"];\r\n\r\n  static async init(opts?: SignClientTypes.Options) {\r\n    const client = new SignClient(opts);\r\n    await client.initialize();\r\n\r\n    return client;\r\n  }\r\n\r\n  constructor(opts?: SignClientTypes.Options) {\r\n    super(opts);\r\n\r\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\r\n    this.metadata = opts?.metadata || getAppMetadata();\r\n    this.signConfig = opts?.signConfig;\r\n\r\n    const logger =\r\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\r\n        ? opts.logger\r\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\r\n\r\n    this.core = opts?.core || new Core(opts);\r\n    this.logger = generateChildLogger(logger, this.name);\r\n    this.session = new Session(this.core, this.logger);\r\n    this.proposal = new Proposal(this.core, this.logger);\r\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\r\n    this.engine = new Engine(this);\r\n    this.auth = new AuthStore(this.core, this.logger);\r\n  }\r\n\r\n  get context() {\r\n    return getLoggerContext(this.logger);\r\n  }\r\n\r\n  get pairing() {\r\n    return this.core.pairing.pairings;\r\n  }\r\n\r\n  // ---------- Events ----------------------------------------------- //\r\n\r\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\r\n    return this.events.on(name, listener);\r\n  };\r\n\r\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\r\n    return this.events.once(name, listener);\r\n  };\r\n\r\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\r\n    return this.events.off(name, listener);\r\n  };\r\n\r\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\r\n    return this.events.removeListener(name, listener);\r\n  };\r\n\r\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\r\n    return this.events.removeAllListeners(name);\r\n  };\r\n\r\n  // ---------- Engine ----------------------------------------------- //\r\n\r\n  public connect: ISignClient[\"connect\"] = async (params) => {\r\n    try {\r\n      return await this.engine.connect(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public pair: ISignClient[\"pair\"] = async (params) => {\r\n    try {\r\n      return await this.engine.pair(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public approve: ISignClient[\"approve\"] = async (params) => {\r\n    try {\r\n      return await this.engine.approve(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public reject: ISignClient[\"reject\"] = async (params) => {\r\n    try {\r\n      return await this.engine.reject(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public update: ISignClient[\"update\"] = async (params) => {\r\n    try {\r\n      return await this.engine.update(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public extend: ISignClient[\"extend\"] = async (params) => {\r\n    try {\r\n      return await this.engine.extend(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\r\n    try {\r\n      return await this.engine.request<T>(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public respond: ISignClient[\"respond\"] = async (params) => {\r\n    try {\r\n      return await this.engine.respond(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public ping: ISignClient[\"ping\"] = async (params) => {\r\n    try {\r\n      return await this.engine.ping(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public emit: ISignClient[\"emit\"] = async (params) => {\r\n    try {\r\n      return await this.engine.emit(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\r\n    try {\r\n      return await this.engine.disconnect(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public find: ISignClient[\"find\"] = (params) => {\r\n    try {\r\n      return this.engine.find(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\r\n    try {\r\n      return this.engine.getPendingSessionRequests();\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public authenticate: ISignClient[\"authenticate\"] = async (params) => {\r\n    try {\r\n      return await this.engine.authenticate(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\r\n    try {\r\n      return this.engine.formatAuthMessage(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\r\n    try {\r\n      return await this.engine.approveSessionAuthenticate(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\r\n    try {\r\n      return await this.engine.rejectSessionAuthenticate(params);\r\n    } catch (error: any) {\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // ---------- Private ----------------------------------------------- //\r\n\r\n  private async initialize() {\r\n    this.logger.trace(`Initialized`);\r\n    try {\r\n      await this.core.start();\r\n      await this.session.init();\r\n      await this.proposal.init();\r\n      await this.pendingRequest.init();\r\n      await this.engine.init();\r\n      await this.auth.init();\r\n      this.core.verify.init({ verifyUrl: this.metadata.verifyUrl });\r\n      this.logger.info(`SignClient Initialization Success`);\r\n      this.engine.processRelayMessageCache();\r\n    } catch (error: any) {\r\n      this.logger.info(`SignClient Initialization Failure`);\r\n      this.logger.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","import { SignClient as Client } from \"./client\";\r\nimport { Session } from \"./controllers/session\";\r\nexport * from \"./constants\";\r\n\r\nexport const SessionStore = Session;\r\nexport const SignClient = Client;\r\nexport default Client;\r\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","engineEvent","session","completeSession","id","relayProtocol","namespaces","sessionConfig","proposer","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","getSdkError","reason","acknowledged","clientRpcId","payloadId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","_a","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","event","isSessionCompatible","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","onSessionConnect","onAuthenticate","sessionObject","fallbackId","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","sessionAuthenticateResponseParams","auths","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","pairing","duplicates","p","_b","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","formatJsonRpcRequest","isBrowser","METHODS_TO_VERIFY","hash","hashMessage","opts","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","reqMethod","resMethod","requestMethod","expectedMethods","err","subscriptionId","target","relay","controller","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","metadata","context","VERIFY_SERVER","properties","property","i","numItemsToDelete","k","deletedRecord","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}