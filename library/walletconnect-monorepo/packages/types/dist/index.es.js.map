{"version":3,"file":"index.es.js","sources":["../src/core/core.ts","../src/core/crypto.ts","../src/core/history.ts","../src/core/messages.ts","../src/core/publisher.ts","../src/core/relayer.ts","../src/core/store.ts","../src/core/subscriber.ts","../src/core/keychain.ts","../src/core/expirer.ts","../src/core/pairing.ts","../src/core/verify.ts","../src/core/echo.ts","../src/sign-client/client.ts","../src/sign-client/engine.ts"],"sourcesContent":["import { IEvents } from \"@walletconnect/events\";\r\nimport { IHeartBeat } from \"@walletconnect/heartbeat\";\r\nimport { IKeyValueStorage, KeyValueStorageOptions } from \"@walletconnect/keyvaluestorage\";\r\n\r\nimport { ICrypto } from \"./crypto\";\r\nimport { IRelayer } from \"./relayer\";\r\nimport { IKeyChain } from \"./keychain\";\r\nimport { IJsonRpcHistory } from \"./history\";\r\nimport { IExpirer } from \"./expirer\";\r\nimport { IPairing } from \"./pairing\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { IVerify } from \"./verify\";\r\nimport { IEchoClient } from \"./echo\";\r\nexport declare namespace CoreTypes {\r\n  interface Options {\r\n    projectId?: string;\r\n    name?: string;\r\n    relayUrl?: string;\r\n    logger?: string | Logger;\r\n    keychain?: IKeyChain;\r\n    storage?: IKeyValueStorage;\r\n    storageOptions?: KeyValueStorageOptions;\r\n    maxLogBlobSizeInBytes?: number;\r\n    customStoragePrefix?: string;\r\n  }\r\n\r\n  interface Metadata {\r\n    name: string;\r\n    description: string;\r\n    url: string;\r\n    icons: string[];\r\n    verifyUrl?: string;\r\n    redirect?: {\r\n      native?: string;\r\n      universal?: string;\r\n    };\r\n  }\r\n}\r\n\r\nexport abstract class ICore extends IEvents {\r\n  public readonly protocol = \"wc\";\r\n  public readonly version = 2;\r\n\r\n  public abstract readonly name: string;\r\n  public abstract readonly context: string;\r\n  public abstract readonly relayUrl?: string;\r\n  public abstract readonly projectId?: string;\r\n  public abstract readonly customStoragePrefix: string;\r\n\r\n  public abstract logger: Logger;\r\n  public abstract heartbeat: IHeartBeat;\r\n  public abstract crypto: ICrypto;\r\n  public abstract relayer: IRelayer;\r\n  public abstract storage: IKeyValueStorage;\r\n  public abstract history: IJsonRpcHistory;\r\n  public abstract expirer: IExpirer;\r\n  public abstract pairing: IPairing;\r\n  public abstract verify: IVerify;\r\n  public abstract echoClient: IEchoClient;\r\n\r\n  constructor(public opts?: CoreTypes.Options) {\r\n    super();\r\n  }\r\n\r\n  public abstract start(): Promise<void>;\r\n}\r\n","import { JsonRpcPayload } from \"@walletconnect/jsonrpc-types\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { ICore } from \"./core\";\r\nimport { IKeyChain } from \"./keychain\";\r\n\r\nexport declare namespace CryptoTypes {\r\n  export interface Participant {\r\n    publicKey: string;\r\n  }\r\n\r\n  export interface KeyPair {\r\n    privateKey: string;\r\n    publicKey: string;\r\n  }\r\n\r\n  export interface EncryptParams {\r\n    message: string;\r\n    symKey: string;\r\n    type?: number;\r\n    iv?: string;\r\n    senderPublicKey?: string;\r\n  }\r\n\r\n  export interface DecryptParams {\r\n    symKey: string;\r\n    encoded: string;\r\n  }\r\n\r\n  export interface EncodingParams {\r\n    type: Uint8Array;\r\n    sealed: Uint8Array;\r\n    iv: Uint8Array;\r\n    senderPublicKey?: Uint8Array;\r\n  }\r\n\r\n  export interface EncodeOptions {\r\n    type?: number;\r\n    senderPublicKey?: string;\r\n    receiverPublicKey?: string;\r\n  }\r\n\r\n  export interface DecodeOptions {\r\n    receiverPublicKey?: string;\r\n  }\r\n\r\n  export interface EncodingValidation {\r\n    type: number;\r\n    senderPublicKey?: string;\r\n    receiverPublicKey?: string;\r\n  }\r\n\r\n  export interface TypeOneParams {\r\n    type: 1;\r\n    senderPublicKey: string;\r\n    receiverPublicKey: string;\r\n  }\r\n}\r\n\r\nexport abstract class ICrypto {\r\n  public abstract name: string;\r\n\r\n  public abstract readonly context: string;\r\n\r\n  public abstract keychain: IKeyChain;\r\n\r\n  public abstract readonly randomSessionIdentifier: string;\r\n\r\n  constructor(\r\n    public core: ICore,\r\n    public logger: Logger,\r\n    // @ts-ignore\r\n    keychain?: IKeyChain,\r\n  ) {}\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract hasKeys(tag: string): boolean;\r\n\r\n  public abstract getClientId(): Promise<string>;\r\n\r\n  public abstract generateKeyPair(): Promise<string>;\r\n\r\n  public abstract generateSharedKey(\r\n    selfPublicKey: string,\r\n    peerPublicKey: string,\r\n    overrideTopic?: string,\r\n  ): Promise<string>;\r\n\r\n  public abstract setSymKey(symKey: string, overrideTopic?: string): Promise<string>;\r\n\r\n  public abstract deleteKeyPair(publicKey: string): Promise<void>;\r\n\r\n  public abstract deleteSymKey(topic: string): Promise<void>;\r\n\r\n  public abstract encode(\r\n    topic: string,\r\n    payload: JsonRpcPayload,\r\n    opts?: CryptoTypes.EncodeOptions,\r\n  ): Promise<string>;\r\n\r\n  public abstract decode(\r\n    topic: string,\r\n    encoded: string,\r\n    opts?: CryptoTypes.DecodeOptions,\r\n  ): Promise<JsonRpcPayload>;\r\n\r\n  public abstract signJWT(aud: string): Promise<string>;\r\n  public abstract getPayloadType(encoded: string): number;\r\n  public abstract getPayloadSenderPublicKey(encoded: string): string | undefined;\r\n}\r\n","import { IEvents } from \"@walletconnect/events\";\r\nimport {\r\n  ErrorResponse,\r\n  JsonRpcRequest,\r\n  JsonRpcResponse,\r\n  RequestArguments,\r\n} from \"@walletconnect/jsonrpc-types\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\n\r\nimport { ICore } from \"./core\";\r\n\r\nexport interface JsonRpcRecord {\r\n  id: number;\r\n  topic: string;\r\n  request: RequestArguments;\r\n  chainId?: string;\r\n  response?: { result: any } | { error: ErrorResponse };\r\n  expiry?: number;\r\n}\r\n\r\nexport interface RequestEvent {\r\n  topic: string;\r\n  request: JsonRpcRequest;\r\n  chainId?: string;\r\n}\r\n\r\nexport abstract class IJsonRpcHistory extends IEvents {\r\n  public records = new Map<number, JsonRpcRecord>();\r\n\r\n  public abstract readonly context: string;\r\n\r\n  public abstract readonly size: number;\r\n\r\n  public abstract readonly keys: number[];\r\n\r\n  public abstract readonly values: JsonRpcRecord[];\r\n\r\n  public abstract readonly pending: RequestEvent[];\r\n\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    super();\r\n  }\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract set(topic: string, request: JsonRpcRequest, chainId?: string): void;\r\n\r\n  public abstract get(topic: string, id: number): Promise<JsonRpcRecord>;\r\n\r\n  public abstract resolve(response: JsonRpcResponse): Promise<void>;\r\n\r\n  public abstract delete(topic: string, id?: number): void;\r\n\r\n  public abstract exists(topic: string, id: number): Promise<boolean>;\r\n}\r\n","import { Logger } from \"@walletconnect/logger\";\r\nimport { ICore } from \"./core\";\r\n\r\nexport type MessageRecord = Record<string, string>;\r\n\r\nexport abstract class IMessageTracker {\r\n  public abstract messages: Map<string, MessageRecord>;\r\n\r\n  public abstract name: string;\r\n\r\n  public abstract readonly context: string;\r\n\r\n  constructor(public logger: Logger, public core: ICore) {}\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract set(topic: string, message: string): Promise<string>;\r\n\r\n  public abstract get(topic: string): MessageRecord;\r\n\r\n  public abstract has(topic: string, message: string): boolean;\r\n\r\n  public abstract del(topic: string): Promise<void>;\r\n}\r\n","import { IEvents } from \"@walletconnect/events\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\n\r\nimport { IRelayer, RelayerTypes } from \"./relayer\";\r\n\r\nexport declare namespace PublisherTypes {\r\n  export interface Params {\r\n    topic: string;\r\n    message: string;\r\n    opts: Omit<Required<RelayerTypes.PublishOptions>, \"internal\">;\r\n  }\r\n}\r\n\r\nexport abstract class IPublisher extends IEvents {\r\n  public abstract name: string;\r\n\r\n  public abstract readonly context: string;\r\n\r\n  constructor(public relayer: IRelayer, public logger: Logger) {\r\n    super();\r\n  }\r\n\r\n  public abstract publish(\r\n    topic: string,\r\n    message: string,\r\n    opts?: RelayerTypes.PublishOptions,\r\n  ): Promise<void>;\r\n}\r\n","import { IEvents } from \"@walletconnect/events\";\r\nimport { IJsonRpcProvider, JsonRpcPayload, RequestArguments } from \"@walletconnect/jsonrpc-types\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\n\r\nimport { ICore } from \"./core\";\r\nimport { IMessageTracker } from \"./messages\";\r\nimport { IPublisher } from \"./publisher\";\r\nimport { ISubscriber } from \"./subscriber\";\r\n\r\nexport declare namespace RelayerTypes {\r\n  export interface ProtocolOptions {\r\n    protocol: string;\r\n    data?: string;\r\n  }\r\n  export interface PublishOptions {\r\n    relay?: ProtocolOptions;\r\n    ttl?: number;\r\n    prompt?: boolean;\r\n    tag?: number;\r\n    id?: number;\r\n    internal?: {\r\n      throwOnFailedPublish?: boolean;\r\n    };\r\n  }\r\n\r\n  export interface SubscribeOptions {\r\n    relay: ProtocolOptions;\r\n  }\r\n\r\n  export interface UnsubscribeOptions {\r\n    id?: string;\r\n    relay: ProtocolOptions;\r\n  }\r\n\r\n  export type RequestOptions = PublishOptions | SubscribeOptions | UnsubscribeOptions;\r\n\r\n  export interface PublishPayload {\r\n    topic: string;\r\n    message: string;\r\n    opts?: RelayerTypes.PublishOptions;\r\n  }\r\n  export interface MessageEvent {\r\n    topic: string;\r\n    message: string;\r\n    publishedAt: number;\r\n  }\r\n\r\n  export interface RpcUrlParams {\r\n    protocol: string;\r\n    version: number;\r\n    auth: string;\r\n    relayUrl: string;\r\n    sdkVersion: string;\r\n    projectId?: string;\r\n    useOnCloseEvent?: boolean;\r\n    bundleId?: string;\r\n  }\r\n}\r\n\r\nexport interface RelayerOptions {\r\n  core: ICore;\r\n  logger?: string | Logger;\r\n  relayUrl?: string;\r\n  projectId?: string;\r\n}\r\n\r\nexport interface RelayerClientMetadata {\r\n  protocol: string;\r\n  version: number;\r\n  env: string;\r\n  host?: string;\r\n}\r\n\r\nexport abstract class IRelayer extends IEvents {\r\n  public abstract core: ICore;\r\n\r\n  public abstract logger: Logger;\r\n\r\n  public abstract subscriber: ISubscriber;\r\n\r\n  public abstract publisher: IPublisher;\r\n\r\n  public abstract messages: IMessageTracker;\r\n\r\n  public abstract provider: IJsonRpcProvider;\r\n\r\n  public abstract name: string;\r\n\r\n  public abstract transportExplicitlyClosed: boolean;\r\n\r\n  public abstract readonly context: string;\r\n\r\n  public abstract readonly connected: boolean;\r\n\r\n  public abstract readonly connecting: boolean;\r\n\r\n  constructor(\r\n    // @ts-ignore\r\n    opts: RelayerOptions,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract publish(\r\n    topic: string,\r\n    message: string,\r\n    opts?: RelayerTypes.PublishOptions,\r\n  ): Promise<void>;\r\n\r\n  public abstract request(request: RequestArguments): Promise<JsonRpcPayload>;\r\n\r\n  public abstract subscribe(topic: string, opts?: RelayerTypes.SubscribeOptions): Promise<string>;\r\n\r\n  public abstract unsubscribe(topic: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;\r\n  public abstract transportClose(): Promise<void>;\r\n  public abstract transportOpen(relayUrl?: string): Promise<void>;\r\n  public abstract restartTransport(relayUrl?: string): Promise<void>;\r\n  public abstract confirmOnlineStateOrThrow(): Promise<void>;\r\n  public abstract handleBatchMessageEvents(messages: RelayerTypes.MessageEvent[]): Promise<void>;\r\n}\r\n","import { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\nimport { ICore } from \"./core\";\r\n\r\nexport abstract class IStore<Key, Value> {\r\n  public abstract map: Map<Key, Value>;\r\n\r\n  public abstract readonly context: string;\r\n\r\n  public abstract readonly length: number;\r\n\r\n  public abstract readonly keys: Key[];\r\n\r\n  public abstract readonly values: Value[];\r\n\r\n  constructor(\r\n    public core: ICore,\r\n    public logger: Logger,\r\n    public name: string,\r\n    // @ts-ignore\r\n    storagePrefix?: string,\r\n  ) {}\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract set(key: Key, value: Value): Promise<void>;\r\n\r\n  public abstract get(key: Key): Value;\r\n\r\n  public abstract getAll(filter?: Partial<Value>): Value[];\r\n\r\n  public abstract update(key: Key, update: Partial<Value>): Promise<void>;\r\n\r\n  public abstract delete(key: Key, reason: ErrorResponse): Promise<void>;\r\n}\r\n","import { IEvents } from \"@walletconnect/events\";\r\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\n\r\nimport { IRelayer, RelayerTypes } from \"./relayer\";\r\n\r\nexport declare namespace SubscriberTypes {\r\n  export interface Params extends RelayerTypes.SubscribeOptions {\r\n    topic: string;\r\n  }\r\n\r\n  export interface Active extends Params {\r\n    id: string;\r\n  }\r\n}\r\n\r\nexport declare namespace SubscriberEvents {\r\n  export type Created = SubscriberTypes.Active;\r\n\r\n  export interface Deleted extends SubscriberTypes.Active {\r\n    reason: ErrorResponse;\r\n  }\r\n\r\n  export type Expired = Deleted;\r\n}\r\n\r\nexport abstract class ISubscriberTopicMap {\r\n  public map = new Map<string, string[]>();\r\n\r\n  public abstract readonly topics: string[];\r\n\r\n  public abstract set(topic: string, id: string): void;\r\n\r\n  public abstract get(topic: string): string[];\r\n\r\n  public abstract exists(topic: string, id: string): boolean;\r\n\r\n  public abstract delete(topic: string, id?: string): void;\r\n\r\n  public abstract clear(): void;\r\n}\r\n\r\nexport abstract class ISubscriber extends IEvents {\r\n  public abstract subscriptions: Map<string, SubscriberTypes.Active>;\r\n\r\n  public abstract topicMap: ISubscriberTopicMap;\r\n\r\n  public abstract pending: Map<string, SubscriberTypes.Params>;\r\n\r\n  public abstract readonly length: number;\r\n\r\n  public abstract readonly ids: string[];\r\n\r\n  public abstract readonly values: SubscriberTypes.Active[];\r\n\r\n  public abstract readonly topics: string[];\r\n\r\n  public abstract name: string;\r\n\r\n  public abstract readonly context: string;\r\n\r\n  constructor(public relayer: IRelayer, public logger: Logger) {\r\n    super();\r\n  }\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract subscribe(\r\n    topic: string,\r\n    opts?: RelayerTypes.SubscribeOptions,\r\n  ): Promise<string | null>;\r\n\r\n  public abstract unsubscribe(topic: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;\r\n\r\n  public abstract isSubscribed(topic: string): Promise<boolean>;\r\n\r\n  public abstract start(): Promise<void>;\r\n\r\n  public abstract stop(): Promise<void>;\r\n}\r\n","import { Logger } from \"@walletconnect/logger\";\r\nimport { ICore } from \"./core\";\r\n\r\nexport abstract class IKeyChain {\r\n  public abstract keychain: Map<string, string>;\r\n\r\n  public abstract name: string;\r\n\r\n  public abstract readonly context: string;\r\n\r\n  constructor(public core: ICore, public logger: Logger) {}\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract has(tag: string, opts?: any): boolean;\r\n\r\n  public abstract set(tag: string, key: string, opts?: any): Promise<void>;\r\n\r\n  public abstract get(tag: string, opts?: any): string;\r\n\r\n  public abstract del(tag: string, opts?: any): Promise<void>;\r\n}\r\n","import { IEvents } from \"@walletconnect/events\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\n\r\nimport { ICore } from \"./core\";\r\n\r\nexport declare namespace ExpirerTypes {\r\n  interface Expiration {\r\n    target: string;\r\n    expiry: number;\r\n  }\r\n\r\n  interface Created {\r\n    target: string;\r\n    expiration: Expiration;\r\n  }\r\n\r\n  interface Deleted {\r\n    target: string;\r\n    expiration: Expiration;\r\n  }\r\n\r\n  interface Expired {\r\n    target: string;\r\n    expiration: Expiration;\r\n  }\r\n}\r\n\r\nexport abstract class IExpirer extends IEvents {\r\n  public abstract name: string;\r\n\r\n  public abstract readonly context: string;\r\n\r\n  public abstract readonly length: number;\r\n\r\n  public abstract readonly keys: string[];\r\n\r\n  public abstract readonly values: ExpirerTypes.Expiration[];\r\n\r\n  constructor(public core: ICore, public logger: Logger) {\r\n    super();\r\n  }\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract has(key: string | number): boolean;\r\n\r\n  public abstract set(key: string | number, expiry: number): void;\r\n\r\n  public abstract get(key: string | number): ExpirerTypes.Expiration;\r\n\r\n  public abstract del(key: string | number): void;\r\n}\r\n","import {\r\n  ErrorResponse,\r\n  JsonRpcRequest,\r\n  JsonRpcResponse,\r\n  JsonRpcResult,\r\n  JsonRpcError,\r\n} from \"@walletconnect/jsonrpc-types\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport { ICore, CoreTypes } from \"./core\";\r\nimport { IStore } from \"./store\";\r\n\r\nimport { RelayerTypes } from \"../core/relayer\";\r\nimport { Logger } from \"@walletconnect/logger\";\r\n\r\nexport declare namespace PairingTypes {\r\n  interface Struct {\r\n    topic: string;\r\n    expiry: number;\r\n    relay: RelayerTypes.ProtocolOptions;\r\n    active: boolean;\r\n    peerMetadata?: CoreTypes.Metadata;\r\n    methods?: string[];\r\n  }\r\n}\r\n\r\nexport declare namespace PairingJsonRpcTypes {\r\n  // -- core ------------------------------------------------------- //\r\n  type DefaultResponse = true | ErrorResponse;\r\n\r\n  type WcMethod = \"wc_pairingDelete\" | \"wc_pairingPing\";\r\n\r\n  type Error = ErrorResponse;\r\n\r\n  // -- requests --------------------------------------------------- //\r\n\r\n  interface RequestParams {\r\n    wc_pairingDelete: {\r\n      code: number;\r\n      message: string;\r\n    };\r\n    wc_pairingPing: Record<string, unknown>;\r\n  }\r\n\r\n  // -- responses -------------------------------------------------- //\r\n  interface Results {\r\n    wc_pairingDelete: true;\r\n    wc_pairingPing: true;\r\n  }\r\n\r\n  // -- events ----------------------------------------------------- //\r\n  interface EventCallback<T extends JsonRpcRequest | JsonRpcResponse> {\r\n    topic: string;\r\n    payload: T;\r\n  }\r\n}\r\n\r\nexport type IPairingStore = IStore<string, PairingTypes.Struct>;\r\n\r\nexport abstract class IPairing {\r\n  public abstract name: string;\r\n  public abstract readonly context: string;\r\n  public abstract events: EventEmitter;\r\n  public abstract pairings: IPairingStore;\r\n\r\n  constructor(public logger: Logger, public core: ICore) {}\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract pair(params: {\r\n    uri: string;\r\n    activatePairing?: boolean;\r\n  }): Promise<PairingTypes.Struct>;\r\n\r\n  // for proposer to create inactive pairing\r\n  public abstract create(params?: { methods?: string[] }): Promise<{ topic: string; uri: string }>;\r\n\r\n  // for either to activate a previously created pairing\r\n  public abstract activate(params: { topic: string }): Promise<void>;\r\n\r\n  // for both to subscribe on methods requests\r\n  public abstract register(params: { methods: string[] }): void;\r\n\r\n  // for either to update the expiry of an existing pairing.\r\n  public abstract updateExpiry(params: { topic: string; expiry: number }): Promise<void>;\r\n\r\n  // for either to update the metadata of an existing pairing.\r\n  public abstract updateMetadata(params: {\r\n    topic: string;\r\n    metadata: CoreTypes.Metadata;\r\n  }): Promise<void>;\r\n\r\n  // query pairings\r\n  public abstract getPairings(): PairingTypes.Struct[];\r\n\r\n  // for either to ping a peer\r\n  public abstract ping(params: { topic: string }): Promise<void>;\r\n\r\n  // for either peer to disconnect a pairing\r\n  public abstract disconnect(params: { topic: string }): Promise<void>;\r\n}\r\n\r\nexport interface IPairingPrivate {\r\n  sendRequest<M extends PairingJsonRpcTypes.WcMethod>(\r\n    topic: string,\r\n    method: M,\r\n    params: PairingJsonRpcTypes.RequestParams[M],\r\n  ): Promise<number>;\r\n\r\n  sendResult<M extends PairingJsonRpcTypes.WcMethod>(\r\n    id: number,\r\n    topic: string,\r\n    result: PairingJsonRpcTypes.Results[M],\r\n  ): Promise<void>;\r\n\r\n  sendError(id: number, topic: string, error: PairingJsonRpcTypes.Error): Promise<void>;\r\n\r\n  onRelayEventRequest(event: PairingJsonRpcTypes.EventCallback<JsonRpcRequest>): void;\r\n\r\n  onRelayEventResponse(event: PairingJsonRpcTypes.EventCallback<JsonRpcResponse>): Promise<void>;\r\n\r\n  onPairingPingRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<PairingJsonRpcTypes.RequestParams[\"wc_pairingPing\"]>,\r\n  ): Promise<void>;\r\n\r\n  onPairingPingResponse(\r\n    topic: string,\r\n    payload: JsonRpcResult<PairingJsonRpcTypes.Results[\"wc_pairingPing\"]> | JsonRpcError,\r\n  ): void;\r\n\r\n  onPairingDeleteRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<PairingJsonRpcTypes.RequestParams[\"wc_pairingDelete\"]>,\r\n  ): Promise<void>;\r\n\r\n  onUnknownRpcMethodRequest(topic: string, payload: JsonRpcRequest): Promise<void>;\r\n\r\n  onUnknownRpcMethodResponse(method: string): void;\r\n\r\n  deletePairing(topic: string, expirerHasDeleted?: boolean): Promise<void>;\r\n}\r\n","import { Logger } from \"@walletconnect/logger\";\r\n\r\nexport declare namespace Verify {\r\n  export interface Context {\r\n    verified: {\r\n      origin: string;\r\n      validation: \"UNKNOWN\" | \"VALID\" | \"INVALID\";\r\n      verifyUrl: string;\r\n      isScam?: boolean;\r\n    };\r\n  }\r\n}\r\n\r\nexport abstract class IVerify {\r\n  public abstract readonly context: string;\r\n\r\n  constructor(public projectId: string, public logger: Logger) {}\r\n\r\n  public abstract init(params?: { verifyUrl?: string }): Promise<void>;\r\n\r\n  public abstract register(params: { attestationId: string }): Promise<void>;\r\n\r\n  public abstract resolve(params: {\r\n    attestationId: string;\r\n    verifyUrl?: string;\r\n  }): Promise<{ origin: string; isScam?: boolean }>;\r\n}\r\n","import { Logger } from \"@walletconnect/logger\";\r\n\r\nexport declare namespace EchoClientTypes {\r\n  type RegisterDeviceTokenParams = {\r\n    clientId: string;\r\n    token: string;\r\n    notificationType: \"fcm\" | \"apns\" | \"apns-sandbox\" | \"noop\";\r\n    enableEncrypted?: boolean;\r\n  };\r\n}\r\nexport abstract class IEchoClient {\r\n  public abstract readonly context: string;\r\n  constructor(public projectId: string, public logger: Logger) {}\r\n\r\n  public abstract registerDeviceToken(\r\n    params: EchoClientTypes.RegisterDeviceTokenParams,\r\n  ): Promise<void>;\r\n}\r\n","import { Logger } from \"@walletconnect/logger\";\r\nimport EventEmmiter from \"events\";\r\nimport { CoreTypes, ICore } from \"../core/core\";\r\nimport { IEngine } from \"./engine\";\r\nimport { IPendingRequest } from \"./pendingRequest\";\r\nimport { IProposal, ProposalTypes } from \"./proposal\";\r\nimport { ISession, SessionTypes } from \"./session\";\r\nimport { Verify } from \"../core/verify\";\r\nimport { IAuth, AuthTypes } from \"./auth\";\r\n\r\nexport declare namespace SignClientTypes {\r\n  type Event =\r\n    | \"session_proposal\"\r\n    | \"session_update\"\r\n    | \"session_extend\"\r\n    | \"session_ping\"\r\n    | \"session_delete\"\r\n    | \"session_expire\"\r\n    | \"session_request\"\r\n    | \"session_request_sent\"\r\n    | \"session_event\"\r\n    | \"session_authenticate\"\r\n    | \"proposal_expire\"\r\n    | \"session_request_expire\";\r\n\r\n  interface BaseEventArgs<T = unknown> {\r\n    id: number;\r\n    topic: string;\r\n    params: T;\r\n  }\r\n  interface EventArguments {\r\n    session_proposal: {\r\n      verifyContext: Verify.Context;\r\n    } & Omit<BaseEventArgs<ProposalTypes.Struct>, \"topic\">;\r\n    session_update: BaseEventArgs<{ namespaces: SessionTypes.Namespaces }>;\r\n    session_extend: Omit<BaseEventArgs, \"params\">;\r\n    session_ping: Omit<BaseEventArgs, \"params\">;\r\n    session_delete: Omit<BaseEventArgs, \"params\">;\r\n    session_expire: { topic: string };\r\n    session_request: {\r\n      verifyContext: Verify.Context;\r\n    } & BaseEventArgs<{\r\n      request: { method: string; params: any; expiryTimestamp?: number };\r\n      chainId: string;\r\n    }>;\r\n    session_request_sent: {\r\n      request: { method: string; params: any };\r\n      topic: string;\r\n      chainId: string;\r\n      id: number;\r\n    };\r\n    session_event: BaseEventArgs<{\r\n      event: { name: string; data: any };\r\n      chainId: string;\r\n    }>;\r\n    session_authenticate: {\r\n      verifyContext: Verify.Context;\r\n    } & BaseEventArgs<AuthTypes.AuthRequestEventArgs>;\r\n    proposal_expire: { id: number };\r\n    session_request_expire: { id: number };\r\n  }\r\n\r\n  type Metadata = CoreTypes.Metadata;\r\n\r\n  type SignConfig = {\r\n    disableRequestQueue?: boolean;\r\n  };\r\n\r\n  interface Options extends CoreTypes.Options {\r\n    core?: ICore;\r\n    metadata?: Metadata;\r\n    signConfig?: SignConfig;\r\n  }\r\n}\r\n\r\nexport abstract class ISignClientEvents extends EventEmmiter {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public abstract emit: <E extends SignClientTypes.Event>(\r\n    event: E,\r\n    args: SignClientTypes.EventArguments[E],\r\n  ) => boolean;\r\n\r\n  public abstract on: <E extends SignClientTypes.Event>(\r\n    event: E,\r\n    listener: (args: SignClientTypes.EventArguments[E]) => any,\r\n  ) => this;\r\n\r\n  public abstract once: <E extends SignClientTypes.Event>(\r\n    event: E,\r\n    listener: (args: SignClientTypes.EventArguments[E]) => any,\r\n  ) => this;\r\n\r\n  public abstract off: <E extends SignClientTypes.Event>(\r\n    event: E,\r\n    listener: (args: SignClientTypes.EventArguments[E]) => any,\r\n  ) => this;\r\n\r\n  public abstract removeListener: <E extends SignClientTypes.Event>(\r\n    event: E,\r\n    listener: (args: SignClientTypes.EventArguments[E]) => any,\r\n  ) => this;\r\n\r\n  public abstract removeAllListeners: <E extends SignClientTypes.Event>(event: E) => this;\r\n}\r\n\r\nexport abstract class ISignClient {\r\n  public readonly protocol = \"wc\";\r\n  public readonly version = 2;\r\n\r\n  public abstract readonly name: string;\r\n  public abstract readonly context: string;\r\n  public abstract readonly metadata: SignClientTypes.Metadata;\r\n\r\n  public abstract core: ICore;\r\n  public abstract logger: Logger;\r\n  public abstract events: ISignClientEvents;\r\n  public abstract engine: IEngine;\r\n  public abstract session: ISession;\r\n  public abstract proposal: IProposal;\r\n  public abstract pendingRequest: IPendingRequest;\r\n  public abstract auth: IAuth;\r\n  public abstract signConfig?: SignClientTypes.SignConfig;\r\n\r\n  constructor(public opts?: SignClientTypes.Options) {}\r\n\r\n  public abstract connect: IEngine[\"connect\"];\r\n  public abstract pair: IEngine[\"pair\"];\r\n  public abstract approve: IEngine[\"approve\"];\r\n  public abstract reject: IEngine[\"reject\"];\r\n  public abstract update: IEngine[\"update\"];\r\n  public abstract extend: IEngine[\"extend\"];\r\n  public abstract request: IEngine[\"request\"];\r\n  public abstract respond: IEngine[\"respond\"];\r\n  public abstract ping: IEngine[\"ping\"];\r\n  public abstract emit: IEngine[\"emit\"];\r\n  public abstract disconnect: IEngine[\"disconnect\"];\r\n  public abstract find: IEngine[\"find\"];\r\n  public abstract getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"];\r\n  public abstract authenticate: IEngine[\"authenticate\"];\r\n  public abstract formatAuthMessage: IEngine[\"formatAuthMessage\"];\r\n  public abstract approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"];\r\n  public abstract rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"];\r\n}\r\n","import {\r\n  JsonRpcResponse,\r\n  JsonRpcRequest,\r\n  ErrorResponse,\r\n  JsonRpcResult,\r\n  JsonRpcError,\r\n} from \"@walletconnect/jsonrpc-types\";\r\nimport { ISignClient } from \"./client\";\r\nimport { RelayerTypes } from \"../core/relayer\";\r\nimport { SessionTypes } from \"./session\";\r\nimport { ProposalTypes } from \"./proposal\";\r\nimport { PairingTypes } from \"../core/pairing\";\r\nimport { JsonRpcTypes } from \"./jsonrpc\";\r\nimport { EventEmitter } from \"events\";\r\nimport { PendingRequestTypes } from \"./pendingRequest\";\r\nimport { AuthTypes } from \"./auth\";\r\nimport { CryptoTypes } from \"../core\";\r\n\r\nexport declare namespace EngineTypes {\r\n  type Event =\r\n    | \"session_connect\"\r\n    | \"session_approve\"\r\n    | \"session_update\"\r\n    | \"session_extend\"\r\n    | \"session_ping\"\r\n    | \"pairing_ping\"\r\n    | \"session_request\";\r\n\r\n  interface EventArguments {\r\n    session_connect: {\r\n      error?: ErrorResponse;\r\n      session?: SessionTypes.Struct;\r\n    };\r\n    session_approve: { error?: ErrorResponse };\r\n    session_update: { error?: ErrorResponse };\r\n    session_extend: { error?: ErrorResponse };\r\n    session_ping: { error?: ErrorResponse };\r\n    pairing_ping: { error?: ErrorResponse };\r\n    session_request: { error?: ErrorResponse; result?: any };\r\n  }\r\n\r\n  interface UriParameters {\r\n    protocol: string;\r\n    version: number;\r\n    topic: string;\r\n    symKey: string;\r\n    relay: RelayerTypes.ProtocolOptions;\r\n    methods?: string[];\r\n    expiryTimestamp?: number;\r\n  }\r\n\r\n  interface EventCallback<T extends JsonRpcRequest | JsonRpcResponse> {\r\n    topic: string;\r\n    payload: T;\r\n  }\r\n\r\n  interface ConnectParams {\r\n    requiredNamespaces?: ProposalTypes.RequiredNamespaces;\r\n    optionalNamespaces?: ProposalTypes.OptionalNamespaces;\r\n    sessionProperties?: ProposalTypes.SessionProperties;\r\n    pairingTopic?: string;\r\n    relays?: RelayerTypes.ProtocolOptions[];\r\n  }\r\n\r\n  interface PairParams {\r\n    uri: string;\r\n  }\r\n\r\n  interface ApproveParams {\r\n    id: number;\r\n    namespaces: SessionTypes.Namespaces;\r\n    sessionProperties?: ProposalTypes.SessionProperties;\r\n    sessionConfig?: SessionTypes.SessionConfig;\r\n    relayProtocol?: string;\r\n  }\r\n\r\n  interface RejectParams {\r\n    id: number;\r\n    reason: ErrorResponse;\r\n  }\r\n\r\n  interface UpdateParams {\r\n    topic: string;\r\n    namespaces: SessionTypes.Namespaces;\r\n  }\r\n\r\n  interface ExtendParams {\r\n    topic: string;\r\n  }\r\n\r\n  interface RequestParams {\r\n    topic: string;\r\n    request: {\r\n      method: string;\r\n      params: any;\r\n    };\r\n    chainId: string;\r\n    expiry?: number;\r\n  }\r\n\r\n  interface RespondParams {\r\n    topic: string;\r\n    response: JsonRpcResponse;\r\n  }\r\n\r\n  interface EmitParams {\r\n    topic: string;\r\n    event: {\r\n      name: string;\r\n      data: any;\r\n    };\r\n    chainId: string;\r\n  }\r\n\r\n  interface PingParams {\r\n    topic: string;\r\n  }\r\n\r\n  interface DisconnectParams {\r\n    topic: string;\r\n    reason: ErrorResponse;\r\n  }\r\n\r\n  interface FindParams {\r\n    requiredNamespaces: ProposalTypes.RequiredNamespaces;\r\n  }\r\n\r\n  type AcknowledgedPromise = Promise<{ acknowledged: () => Promise<void> }>;\r\n\r\n  type SessionAuthenticateResponsePromise = {\r\n    uri: string;\r\n    response: () => Promise<AuthTypes.AuthenticateResponseResult>;\r\n  };\r\n\r\n  interface RpcOpts {\r\n    req: RelayerTypes.PublishOptions & {\r\n      ttl: number;\r\n    };\r\n    res: RelayerTypes.PublishOptions & {\r\n      ttl: number;\r\n    };\r\n    reject?: RelayerTypes.PublishOptions & {\r\n      ttl: number;\r\n    };\r\n    autoReject?: RelayerTypes.PublishOptions & {\r\n      ttl: number;\r\n    };\r\n  }\r\n\r\n  type RpcOptsMap = Record<JsonRpcTypes.WcMethod, RpcOpts>;\r\n\r\n  type EngineQueue<T> = {\r\n    state: \"IDLE\" | \"ACTIVE\";\r\n    queue: T[];\r\n  };\r\n}\r\n\r\nexport abstract class IEngineEvents extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public abstract emit: <E extends EngineTypes.Event>(\r\n    event: string,\r\n    args: EngineTypes.EventArguments[E],\r\n  ) => boolean;\r\n\r\n  public abstract once: <E extends EngineTypes.Event>(\r\n    event: string,\r\n    listener: (args: EngineTypes.EventArguments[E]) => any,\r\n  ) => this;\r\n}\r\n\r\n// -- private method interface -------------------------------------- //\r\n\r\nexport interface EnginePrivate {\r\n  sendRequest<M extends JsonRpcTypes.WcMethod>(args: {\r\n    topic: string;\r\n    method: M;\r\n    params: JsonRpcTypes.RequestParams[M];\r\n    expiry?: number;\r\n    relayRpcId?: number;\r\n    clientRpcId?: number;\r\n    throwOnFailedPublish?: boolean;\r\n  }): Promise<number>;\r\n\r\n  sendResult<M extends JsonRpcTypes.WcMethod>(args: {\r\n    id: number;\r\n    topic: string;\r\n    result: JsonRpcTypes.Results[M];\r\n    throwOnFailedPublish?: boolean;\r\n    encodeOpts?: CryptoTypes.EncodeOptions;\r\n  }): Promise<void>;\r\n\r\n  sendError(params: {\r\n    id: number;\r\n    topic: string;\r\n    error: JsonRpcTypes.Error;\r\n    encodeOpts?: CryptoTypes.EncodeOptions;\r\n    rpcOpts?: RelayerTypes.PublishOptions;\r\n  }): Promise<void>;\r\n\r\n  onRelayEventRequest(event: EngineTypes.EventCallback<JsonRpcRequest>): Promise<void>;\r\n\r\n  onRelayEventResponse(event: EngineTypes.EventCallback<JsonRpcResponse>): Promise<void>;\r\n\r\n  onRelayEventUnknownPayload(event: EngineTypes.EventCallback<any>): Promise<void>;\r\n\r\n  shouldIgnorePairingRequest(params: { topic: string; requestMethod: string }): boolean;\r\n\r\n  deleteSession(params: {\r\n    topic: string;\r\n    expirerHasDeleted?: boolean;\r\n    id?: number;\r\n    emitEvent?: boolean;\r\n  }): Promise<void>;\r\n\r\n  deleteProposal(id: number, expirerHasDeleted?: boolean): Promise<void>;\r\n\r\n  setExpiry(topic: string, expiry: number): Promise<void>;\r\n\r\n  setProposal(id: number, proposal: ProposalTypes.Struct): Promise<void>;\r\n\r\n  setAuthRequest(\r\n    id: number,\r\n    params: {\r\n      request: AuthTypes.SessionAuthenticateRequest;\r\n      pairingTopic: string;\r\n    },\r\n  ): Promise<void>;\r\n\r\n  setPendingSessionRequest(pendingRequest: PendingRequestTypes.Struct): Promise<void>;\r\n\r\n  deletePendingSessionRequest(\r\n    id: number,\r\n    reason: ErrorResponse,\r\n    expirerHasDeleted?: boolean,\r\n  ): Promise<void>;\r\n\r\n  deletePendingAuthRequest(\r\n    id: number,\r\n    reason: ErrorResponse,\r\n    expirerHasDeleted?: boolean,\r\n  ): Promise<void>;\r\n\r\n  cleanupDuplicatePairings(session: SessionTypes.Struct): Promise<void>;\r\n\r\n  cleanup(): Promise<void>;\r\n\r\n  onSessionProposeRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionPropose\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionProposeResponse(\r\n    topic: string,\r\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionPropose\"]> | JsonRpcError,\r\n  ): Promise<void>;\r\n\r\n  onSessionSettleRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionSettle\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionSettleResponse(\r\n    topic: string,\r\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionSettle\"]> | JsonRpcError,\r\n  ): Promise<void>;\r\n\r\n  onSessionUpdateRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionUpdate\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionUpdateResponse(\r\n    topic: string,\r\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionUpdate\"]> | JsonRpcError,\r\n  ): void;\r\n\r\n  onSessionExtendRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionExtend\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionExtendResponse(\r\n    topic: string,\r\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionExtend\"]> | JsonRpcError,\r\n  ): void;\r\n\r\n  onSessionPingRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionPing\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionPingResponse(\r\n    topic: string,\r\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionPing\"]> | JsonRpcError,\r\n  ): void;\r\n\r\n  onSessionDeleteRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionDelete\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionRequest\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionRequestResponse(\r\n    topic: string,\r\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionRequest\"]> | JsonRpcError,\r\n  ): void;\r\n\r\n  onSessionEventRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionEvent\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionAuthenticateRequest(\r\n    topic: string,\r\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionAuthenticate\"]>,\r\n  ): Promise<void>;\r\n\r\n  onSessionAuthenticateResponse(\r\n    topic: string,\r\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionAuthenticate\"]> | JsonRpcError,\r\n  ): void;\r\n\r\n  // -- Validators ---------------------------------------------------- //\r\n  isValidConnect(params: EngineTypes.ConnectParams): Promise<void>;\r\n\r\n  isValidSessionSettleRequest(params: JsonRpcTypes.RequestParams[\"wc_sessionSettle\"]): void;\r\n\r\n  isValidApprove(params: EngineTypes.ApproveParams): Promise<void>;\r\n\r\n  isValidReject(params: EngineTypes.RejectParams): Promise<void>;\r\n\r\n  isValidUpdate(params: EngineTypes.UpdateParams): Promise<void>;\r\n\r\n  isValidExtend(params: EngineTypes.ExtendParams): Promise<void>;\r\n\r\n  isValidRequest(params: EngineTypes.RequestParams): Promise<void>;\r\n\r\n  isValidRespond(params: EngineTypes.RespondParams): Promise<void>;\r\n\r\n  isValidPing(params: EngineTypes.PingParams): Promise<void>;\r\n\r\n  isValidEmit(params: EngineTypes.EmitParams): Promise<void>;\r\n\r\n  isValidDisconnect(params: EngineTypes.DisconnectParams): Promise<void>;\r\n}\r\n\r\n// -- class interface ----------------------------------------------- //\r\n\r\nexport abstract class IEngine {\r\n  constructor(public client: ISignClient) {}\r\n\r\n  public abstract init(): Promise<void>;\r\n\r\n  public abstract connect(\r\n    params: EngineTypes.ConnectParams,\r\n  ): Promise<{ uri?: string; approval: () => Promise<SessionTypes.Struct> }>;\r\n\r\n  public abstract pair(params: EngineTypes.PairParams): Promise<PairingTypes.Struct>;\r\n\r\n  public abstract approve(\r\n    params: EngineTypes.ApproveParams,\r\n  ): Promise<{ topic: string; acknowledged: () => Promise<SessionTypes.Struct> }>;\r\n\r\n  public abstract reject(params: EngineTypes.RejectParams): Promise<void>;\r\n\r\n  public abstract update(params: EngineTypes.UpdateParams): EngineTypes.AcknowledgedPromise;\r\n\r\n  public abstract extend(params: EngineTypes.ExtendParams): EngineTypes.AcknowledgedPromise;\r\n\r\n  public abstract request<T>(params: EngineTypes.RequestParams): Promise<T>;\r\n\r\n  public abstract respond(params: EngineTypes.RespondParams): Promise<void>;\r\n\r\n  public abstract emit(params: EngineTypes.EmitParams): Promise<void>;\r\n\r\n  public abstract ping(params: EngineTypes.PingParams): Promise<void>;\r\n\r\n  public abstract disconnect(params: EngineTypes.DisconnectParams): Promise<void>;\r\n\r\n  public abstract find: (params: EngineTypes.FindParams) => SessionTypes.Struct[];\r\n\r\n  public abstract getPendingSessionRequests: () => PendingRequestTypes.Struct[];\r\n\r\n  public abstract authenticate: (\r\n    params: AuthTypes.SessionAuthenticateParams,\r\n  ) => Promise<EngineTypes.SessionAuthenticateResponsePromise>;\r\n\r\n  public abstract approveSessionAuthenticate: (\r\n    params: AuthTypes.ApproveSessionAuthenticateParams,\r\n  ) => Promise<{ session: SessionTypes.Struct | undefined }>;\r\n\r\n  public abstract formatAuthMessage: (params: {\r\n    request: AuthTypes.BaseAuthRequestParams;\r\n    iss: string;\r\n  }) => string;\r\n\r\n  public abstract rejectSessionAuthenticate(params: EngineTypes.RejectParams): Promise<void>;\r\n\r\n  public abstract processRelayMessageCache(): void;\r\n}\r\n"],"names":["IEvents","opts","core","logger","keychain","relayer","name","storagePrefix","projectId","EventEmmiter","EventEmitter","client"],"mappings":"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"}