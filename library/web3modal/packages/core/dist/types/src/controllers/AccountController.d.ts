import type { AccountType, CaipAddress, ConnectedWalletInfo, SocialProvider } from '../utils/TypeUtil.js';
import type { Balance } from '@web3modal/common';
import type { W3mFrameTypes } from '@web3modal/wallet';
import type { Chain } from '@web3modal/common';
export interface AccountControllerState {
    isConnected: boolean;
    currentTab: number;
    caipAddress?: CaipAddress;
    address?: string;
    addressLabels: Map<string, string>;
    allAccounts: AccountType[];
    balance?: string;
    balanceSymbol?: string;
    profileName?: string | null;
    profileImage?: string | null;
    addressExplorerUrl?: string;
    smartAccountDeployed?: boolean;
    socialProvider?: SocialProvider;
    tokenBalance?: Balance[];
    shouldUpdateToAddress?: string;
    connectedWalletInfo?: ConnectedWalletInfo;
    preferredAccountType?: W3mFrameTypes.AccountType;
    socialWindow?: Window;
}
export declare const AccountController: {
    state: AccountControllerState;
    replaceState(newState: AccountControllerState): void;
    subscribe(callback: (val: AccountControllerState) => void): () => void;
    subscribeKey<K extends keyof AccountControllerState>(property: K, callback: (val: AccountControllerState[K]) => void): () => void;
    setIsConnected(isConnected: AccountControllerState['isConnected'], chain?: Chain): void;
    setCaipAddress(caipAddress: AccountControllerState['caipAddress'], chain?: Chain): void;
    setBalance(balance: AccountControllerState['balance'], balanceSymbol: AccountControllerState['balanceSymbol'], chain?: Chain): void;
    setProfileName(profileName: AccountControllerState['profileName'], chain?: Chain): void;
    setProfileImage(profileImage: AccountControllerState['profileImage'], chain?: Chain): void;
    setAddressExplorerUrl(explorerUrl: AccountControllerState['addressExplorerUrl'], chain?: Chain): void;
    setSmartAccountDeployed(isDeployed: boolean, chain?: Chain): void;
    setCurrentTab(currentTab: AccountControllerState['currentTab'], chain?: Chain): void;
    setTokenBalance(tokenBalance: AccountControllerState['tokenBalance'], chain?: Chain): void;
    setShouldUpdateToAddress(address: string): void;
    setAllAccounts(accounts: AccountType[], chain?: Chain): void;
    addAddressLabel(address: string, label: string): void;
    removeAddressLabel(address: string): void;
    setConnectedWalletInfo(connectedWalletInfo: AccountControllerState['connectedWalletInfo'], chain?: Chain): void;
    setPreferredAccountType(preferredAccountType: AccountControllerState['preferredAccountType'], chain?: Chain): void;
    setSocialProvider(socialProvider: AccountControllerState['socialProvider'], chain?: Chain): void;
    setSocialWindow(socialWindow: AccountControllerState['socialWindow'], chain?: Chain): void;
    fetchTokenBalance(): Promise<void>;
    resetAccount(chain?: Chain): void;
};
